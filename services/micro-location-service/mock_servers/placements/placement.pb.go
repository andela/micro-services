// Code generated by protoc-gen-go.
// source: placements/placement.proto
// DO NOT EDIT!

/*
Package placements is a generated protocol buffer package.

It is generated from these files:
	placements/placement.proto

It has these top-level messages:
	Empty
	Query
	Placement
	Placements
	PlacementsStatus
	PlacementsStatuses
*/
package placements

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Query struct {
	Status string `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Type   string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	Email  string `protobuf:"bytes,3,opt,name=email" json:"email,omitempty"`
	Client string `protobuf:"bytes,4,opt,name=client" json:"client,omitempty"`
}

func (m *Query) Reset()                    { *m = Query{} }
func (m *Query) String() string            { return proto.CompactTextString(m) }
func (*Query) ProtoMessage()               {}
func (*Query) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Placement struct {
	Id        int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Email     string `protobuf:"bytes,2,opt,name=email" json:"email,omitempty"`
	Level     string `protobuf:"bytes,3,opt,name=level" json:"level,omitempty"`
	Status    string `protobuf:"bytes,4,opt,name=status" json:"status,omitempty"`
	Type      string `protobuf:"bytes,5,opt,name=type" json:"type,omitempty"`
	Client    string `protobuf:"bytes,6,opt,name=client" json:"client,omitempty"`
	CreatedAt string `protobuf:"bytes,7,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	UpdatedAt string `protobuf:"bytes,8,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty"`
}

func (m *Placement) Reset()                    { *m = Placement{} }
func (m *Placement) String() string            { return proto.CompactTextString(m) }
func (*Placement) ProtoMessage()               {}
func (*Placement) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type Placements struct {
	Placements []*Placement `protobuf:"bytes,1,rep,name=placements" json:"placements,omitempty"`
}

func (m *Placements) Reset()                    { *m = Placements{} }
func (m *Placements) String() string            { return proto.CompactTextString(m) }
func (*Placements) ProtoMessage()               {}
func (*Placements) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Placements) GetPlacements() []*Placement {
	if m != nil {
		return m.Placements
	}
	return nil
}

type PlacementsStatus struct {
	Id   string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *PlacementsStatus) Reset()                    { *m = PlacementsStatus{} }
func (m *PlacementsStatus) String() string            { return proto.CompactTextString(m) }
func (*PlacementsStatus) ProtoMessage()               {}
func (*PlacementsStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type PlacementsStatuses struct {
	Status []*PlacementsStatus `protobuf:"bytes,1,rep,name=status" json:"status,omitempty"`
}

func (m *PlacementsStatuses) Reset()                    { *m = PlacementsStatuses{} }
func (m *PlacementsStatuses) String() string            { return proto.CompactTextString(m) }
func (*PlacementsStatuses) ProtoMessage()               {}
func (*PlacementsStatuses) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *PlacementsStatuses) GetStatus() []*PlacementsStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func init() {
	proto.RegisterType((*Empty)(nil), "placements.Empty")
	proto.RegisterType((*Query)(nil), "placements.Query")
	proto.RegisterType((*Placement)(nil), "placements.Placement")
	proto.RegisterType((*Placements)(nil), "placements.Placements")
	proto.RegisterType((*PlacementsStatus)(nil), "placements.PlacementsStatus")
	proto.RegisterType((*PlacementsStatuses)(nil), "placements.PlacementsStatuses")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Micro service

type MicroClient interface {
	ListPlacements(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Placements, error)
	ListStatuses(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PlacementsStatuses, error)
}

type microClient struct {
	cc *grpc.ClientConn
}

func NewMicroClient(cc *grpc.ClientConn) MicroClient {
	return &microClient{cc}
}

func (c *microClient) ListPlacements(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Placements, error) {
	out := new(Placements)
	err := grpc.Invoke(ctx, "/placements.micro/ListPlacements", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microClient) ListStatuses(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PlacementsStatuses, error) {
	out := new(PlacementsStatuses)
	err := grpc.Invoke(ctx, "/placements.micro/ListStatuses", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Micro service

type MicroServer interface {
	ListPlacements(context.Context, *Query) (*Placements, error)
	ListStatuses(context.Context, *Empty) (*PlacementsStatuses, error)
}

func RegisterMicroServer(s *grpc.Server, srv MicroServer) {
	s.RegisterService(&_Micro_serviceDesc, srv)
}

func _Micro_ListPlacements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroServer).ListPlacements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/placements.micro/ListPlacements",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroServer).ListPlacements(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _Micro_ListStatuses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroServer).ListStatuses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/placements.micro/ListStatuses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroServer).ListStatuses(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Micro_serviceDesc = grpc.ServiceDesc{
	ServiceName: "placements.micro",
	HandlerType: (*MicroServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListPlacements",
			Handler:    _Micro_ListPlacements_Handler,
		},
		{
			MethodName: "ListStatuses",
			Handler:    _Micro_ListStatuses_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("placements/placement.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 335 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x52, 0x4d, 0x4e, 0xf3, 0x30,
	0x10, 0xfd, 0xd2, 0xd6, 0xed, 0x97, 0x01, 0x55, 0x30, 0x82, 0x2a, 0xaa, 0x00, 0x21, 0xaf, 0xba,
	0x2a, 0x52, 0xf9, 0xd9, 0xb1, 0xa8, 0x2a, 0x36, 0x88, 0x05, 0x84, 0x03, 0x20, 0x93, 0x78, 0x11,
	0x29, 0x69, 0xa2, 0xd8, 0x41, 0xca, 0x19, 0x38, 0x19, 0xb7, 0xc2, 0x71, 0x12, 0xdb, 0xa0, 0x88,
	0xdd, 0xcc, 0x1b, 0xcf, 0x9b, 0x37, 0xcf, 0x03, 0xcb, 0x22, 0x65, 0x11, 0xcf, 0xf8, 0x5e, 0x8a,
	0x2b, 0x13, 0xae, 0x8b, 0x32, 0x97, 0x39, 0x82, 0xad, 0xd1, 0x19, 0x90, 0x87, 0xac, 0x90, 0x35,
	0x65, 0x40, 0x5e, 0x2a, 0x5e, 0xd6, 0xb8, 0x80, 0xa9, 0x90, 0x4c, 0x56, 0x22, 0xf0, 0x2e, 0xbd,
	0x95, 0x1f, 0x76, 0x19, 0x22, 0x4c, 0x64, 0x5d, 0xf0, 0x60, 0xa4, 0x51, 0x1d, 0xe3, 0x09, 0x10,
	0x9e, 0xb1, 0x24, 0x0d, 0xc6, 0x1a, 0x6c, 0x93, 0x86, 0x21, 0x4a, 0x13, 0x45, 0x1f, 0x4c, 0x5a,
	0x86, 0x36, 0xa3, 0x5f, 0x1e, 0xf8, 0xcf, 0xfd, 0x68, 0x9c, 0xc3, 0x28, 0x89, 0xf5, 0x0c, 0x12,
	0xaa, 0xc8, 0x72, 0x8d, 0x5c, 0x2e, 0x85, 0xa6, 0xfc, 0x83, 0x9b, 0x09, 0x3a, 0x71, 0x34, 0x4e,
	0x06, 0x35, 0x12, 0x47, 0xa3, 0x55, 0x33, 0x75, 0xd5, 0xe0, 0x39, 0x40, 0x54, 0x72, 0x26, 0x79,
	0xfc, 0xc6, 0x64, 0x30, 0xd3, 0x35, 0xbf, 0x43, 0xb6, 0xba, 0x5c, 0x15, 0x71, 0x5f, 0xfe, 0xdf,
	0x96, 0x3b, 0x64, 0x2b, 0xe9, 0x0e, 0xc0, 0xac, 0x22, 0xf0, 0x16, 0x1c, 0x4f, 0xd5, 0x4e, 0xe3,
	0xd5, 0xc1, 0xe6, 0x74, 0x6d, 0xa1, 0xb5, 0x79, 0x1b, 0xba, 0xe6, 0xdf, 0xc1, 0x91, 0x25, 0x79,
	0x6d, 0x57, 0xb0, 0xb6, 0xf8, 0xda, 0x16, 0xb5, 0xd2, 0x9e, 0x65, 0xc6, 0xf6, 0x26, 0xa6, 0x8f,
	0x80, 0xbf, 0xfb, 0xb8, 0xc0, 0x1b, 0xe7, 0xe3, 0x1a, 0x01, 0x67, 0x83, 0x02, 0xba, 0xf7, 0xbd,
	0x65, 0x9b, 0x4f, 0x0f, 0x48, 0x96, 0x44, 0x65, 0x8e, 0xf7, 0x30, 0x7f, 0x4a, 0x84, 0x74, 0xd6,
	0x3a, 0x76, 0x19, 0xf4, 0x75, 0x2c, 0x17, 0xc3, 0xa4, 0xf4, 0x1f, 0xee, 0xe0, 0xb0, 0x69, 0x37,
	0x72, 0x7e, 0x34, 0xeb, 0x1b, 0x5b, 0x5e, 0xfc, 0xa5, 0x88, 0x2b, 0x92, 0xf7, 0xa9, 0xbe, 0xd0,
	0xeb, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb1, 0x6c, 0x45, 0x20, 0xbf, 0x02, 0x00, 0x00,
}
