// Code generated by protoc-gen-go.
// source: users/users.proto
// DO NOT EDIT!

/*
Package users is a generated protocol buffer package.

It is generated from these files:
	users/users.proto

It has these top-level messages:
	Empty
	Permission
	Role
	RoleList
	Id
	AssignRequest
	User
	AllUsers
	FetchUsersParams
*/
package users

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Permission struct {
	Id     int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Key    string `protobuf:"bytes,3,opt,name=key" json:"key,omitempty"`
	RoleId int32  `protobuf:"varint,4,opt,name=role_id,json=roleId" json:"role_id,omitempty"`
}

func (m *Permission) Reset()                    { *m = Permission{} }
func (m *Permission) String() string            { return proto.CompactTextString(m) }
func (*Permission) ProtoMessage()               {}
func (*Permission) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Role struct {
	Id          int32         `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name        string        `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Permissions []*Permission `protobuf:"bytes,3,rep,name=permissions" json:"permissions,omitempty"`
}

func (m *Role) Reset()                    { *m = Role{} }
func (m *Role) String() string            { return proto.CompactTextString(m) }
func (*Role) ProtoMessage()               {}
func (*Role) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Role) GetPermissions() []*Permission {
	if m != nil {
		return m.Permissions
	}
	return nil
}

type RoleList struct {
	Roles []*Role `protobuf:"bytes,1,rep,name=roles" json:"roles,omitempty"`
}

func (m *RoleList) Reset()                    { *m = RoleList{} }
func (m *RoleList) String() string            { return proto.CompactTextString(m) }
func (*RoleList) ProtoMessage()               {}
func (*RoleList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *RoleList) GetRoles() []*Role {
	if m != nil {
		return m.Roles
	}
	return nil
}

type Id struct {
	Id int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *Id) Reset()                    { *m = Id{} }
func (m *Id) String() string            { return proto.CompactTextString(m) }
func (*Id) ProtoMessage()               {}
func (*Id) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type AssignRequest struct {
	RoleId int32    `protobuf:"varint,1,opt,name=role_id,json=roleId" json:"role_id,omitempty"`
	Emails []string `protobuf:"bytes,2,rep,name=emails" json:"emails,omitempty"`
}

func (m *AssignRequest) Reset()                    { *m = AssignRequest{} }
func (m *AssignRequest) String() string            { return proto.CompactTextString(m) }
func (*AssignRequest) ProtoMessage()               {}
func (*AssignRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type User struct {
	Id          int32   `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Email       string  `protobuf:"bytes,2,opt,name=email" json:"email,omitempty"`
	FirstName   string  `protobuf:"bytes,3,opt,name=first_name,json=firstName" json:"first_name,omitempty"`
	LastName    string  `protobuf:"bytes,4,opt,name=last_name,json=lastName" json:"last_name,omitempty"`
	Name        string  `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
	AccessToken string  `protobuf:"bytes,6,opt,name=access_token,json=accessToken" json:"access_token,omitempty"`
	Picture     string  `protobuf:"bytes,7,opt,name=picture" json:"picture,omitempty"`
	Status      string  `protobuf:"bytes,9,opt,name=status" json:"status,omitempty"`
	Roles       []*Role `protobuf:"bytes,10,rep,name=roles" json:"roles,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *User) GetRoles() []*Role {
	if m != nil {
		return m.Roles
	}
	return nil
}

type AllUsers struct {
	Users []*User `protobuf:"bytes,1,rep,name=users" json:"users,omitempty"`
}

func (m *AllUsers) Reset()                    { *m = AllUsers{} }
func (m *AllUsers) String() string            { return proto.CompactTextString(m) }
func (*AllUsers) ProtoMessage()               {}
func (*AllUsers) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *AllUsers) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

type FetchUsersParams struct {
	Limit     int32   `protobuf:"varint,1,opt,name=limit" json:"limit,omitempty"`
	Page      int32   `protobuf:"varint,2,opt,name=page" json:"page,omitempty"`
	OrderBy   string  `protobuf:"bytes,3,opt,name=orderBy" json:"orderBy,omitempty"`
	Name      string  `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Direction string  `protobuf:"bytes,6,opt,name=direction" json:"direction,omitempty"`
	Status    string  `protobuf:"bytes,7,opt,name=status" json:"status,omitempty"`
	RoleId    []int32 `protobuf:"varint,8,rep,name=role_id,json=roleId" json:"role_id,omitempty"`
}

func (m *FetchUsersParams) Reset()                    { *m = FetchUsersParams{} }
func (m *FetchUsersParams) String() string            { return proto.CompactTextString(m) }
func (*FetchUsersParams) ProtoMessage()               {}
func (*FetchUsersParams) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func init() {
	proto.RegisterType((*Empty)(nil), "users.Empty")
	proto.RegisterType((*Permission)(nil), "users.Permission")
	proto.RegisterType((*Role)(nil), "users.Role")
	proto.RegisterType((*RoleList)(nil), "users.RoleList")
	proto.RegisterType((*Id)(nil), "users.Id")
	proto.RegisterType((*AssignRequest)(nil), "users.AssignRequest")
	proto.RegisterType((*User)(nil), "users.User")
	proto.RegisterType((*AllUsers)(nil), "users.AllUsers")
	proto.RegisterType((*FetchUsersParams)(nil), "users.FetchUsersParams")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Micro service

type MicroClient interface {
	ListRoles(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RoleList, error)
	CreateRole(ctx context.Context, in *Role, opts ...grpc.CallOption) (*Empty, error)
	EditRole(ctx context.Context, in *Role, opts ...grpc.CallOption) (*Empty, error)
	ShowRole(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Role, error)
	AssignRole(ctx context.Context, in *AssignRequest, opts ...grpc.CallOption) (*Empty, error)
	UnAssignRole(ctx context.Context, in *AssignRequest, opts ...grpc.CallOption) (*Empty, error)
	ListUsers(ctx context.Context, in *FetchUsersParams, opts ...grpc.CallOption) (*AllUsers, error)
	FetchUser(ctx context.Context, in *Id, opts ...grpc.CallOption) (*User, error)
	UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Empty, error)
	SuspendUser(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	RestoreUser(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	CreateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Empty, error)
	FindOrCreateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
}

type microClient struct {
	cc *grpc.ClientConn
}

func NewMicroClient(cc *grpc.ClientConn) MicroClient {
	return &microClient{cc}
}

func (c *microClient) ListRoles(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RoleList, error) {
	out := new(RoleList)
	err := grpc.Invoke(ctx, "/users.micro/ListRoles", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microClient) CreateRole(ctx context.Context, in *Role, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/users.micro/CreateRole", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microClient) EditRole(ctx context.Context, in *Role, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/users.micro/EditRole", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microClient) ShowRole(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Role, error) {
	out := new(Role)
	err := grpc.Invoke(ctx, "/users.micro/ShowRole", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microClient) AssignRole(ctx context.Context, in *AssignRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/users.micro/AssignRole", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microClient) UnAssignRole(ctx context.Context, in *AssignRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/users.micro/UnAssignRole", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microClient) ListUsers(ctx context.Context, in *FetchUsersParams, opts ...grpc.CallOption) (*AllUsers, error) {
	out := new(AllUsers)
	err := grpc.Invoke(ctx, "/users.micro/ListUsers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microClient) FetchUser(ctx context.Context, in *Id, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/users.micro/FetchUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microClient) UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/users.micro/UpdateUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microClient) SuspendUser(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/users.micro/SuspendUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microClient) RestoreUser(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/users.micro/RestoreUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microClient) CreateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/users.micro/CreateUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microClient) FindOrCreateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/users.micro/FindOrCreateUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Micro service

type MicroServer interface {
	ListRoles(context.Context, *Empty) (*RoleList, error)
	CreateRole(context.Context, *Role) (*Empty, error)
	EditRole(context.Context, *Role) (*Empty, error)
	ShowRole(context.Context, *Id) (*Role, error)
	AssignRole(context.Context, *AssignRequest) (*Empty, error)
	UnAssignRole(context.Context, *AssignRequest) (*Empty, error)
	ListUsers(context.Context, *FetchUsersParams) (*AllUsers, error)
	FetchUser(context.Context, *Id) (*User, error)
	UpdateUser(context.Context, *User) (*Empty, error)
	SuspendUser(context.Context, *Id) (*Empty, error)
	RestoreUser(context.Context, *Id) (*Empty, error)
	CreateUser(context.Context, *User) (*Empty, error)
	FindOrCreateUser(context.Context, *User) (*User, error)
}

func RegisterMicroServer(s *grpc.Server, srv MicroServer) {
	s.RegisterService(&_Micro_serviceDesc, srv)
}

func _Micro_ListRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroServer).ListRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.micro/ListRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroServer).ListRoles(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Micro_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Role)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.micro/CreateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroServer).CreateRole(ctx, req.(*Role))
	}
	return interceptor(ctx, in, info, handler)
}

func _Micro_EditRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Role)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroServer).EditRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.micro/EditRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroServer).EditRole(ctx, req.(*Role))
	}
	return interceptor(ctx, in, info, handler)
}

func _Micro_ShowRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroServer).ShowRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.micro/ShowRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroServer).ShowRole(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Micro_AssignRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroServer).AssignRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.micro/AssignRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroServer).AssignRole(ctx, req.(*AssignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Micro_UnAssignRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroServer).UnAssignRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.micro/UnAssignRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroServer).UnAssignRole(ctx, req.(*AssignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Micro_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchUsersParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.micro/ListUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroServer).ListUsers(ctx, req.(*FetchUsersParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Micro_FetchUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroServer).FetchUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.micro/FetchUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroServer).FetchUser(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Micro_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.micro/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroServer).UpdateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Micro_SuspendUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroServer).SuspendUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.micro/SuspendUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroServer).SuspendUser(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Micro_RestoreUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroServer).RestoreUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.micro/RestoreUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroServer).RestoreUser(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Micro_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.micro/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroServer).CreateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Micro_FindOrCreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroServer).FindOrCreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.micro/FindOrCreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroServer).FindOrCreateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

var _Micro_serviceDesc = grpc.ServiceDesc{
	ServiceName: "users.micro",
	HandlerType: (*MicroServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRoles",
			Handler:    _Micro_ListRoles_Handler,
		},
		{
			MethodName: "CreateRole",
			Handler:    _Micro_CreateRole_Handler,
		},
		{
			MethodName: "EditRole",
			Handler:    _Micro_EditRole_Handler,
		},
		{
			MethodName: "ShowRole",
			Handler:    _Micro_ShowRole_Handler,
		},
		{
			MethodName: "AssignRole",
			Handler:    _Micro_AssignRole_Handler,
		},
		{
			MethodName: "UnAssignRole",
			Handler:    _Micro_UnAssignRole_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _Micro_ListUsers_Handler,
		},
		{
			MethodName: "FetchUser",
			Handler:    _Micro_FetchUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _Micro_UpdateUser_Handler,
		},
		{
			MethodName: "SuspendUser",
			Handler:    _Micro_SuspendUser_Handler,
		},
		{
			MethodName: "RestoreUser",
			Handler:    _Micro_RestoreUser_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _Micro_CreateUser_Handler,
		},
		{
			MethodName: "FindOrCreateUser",
			Handler:    _Micro_FindOrCreateUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("users/users.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 604 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x54, 0xdd, 0x6e, 0xd3, 0x4c,
	0x10, 0xfd, 0xd2, 0xd8, 0x49, 0x3c, 0xc9, 0x07, 0xed, 0x2a, 0xa2, 0x56, 0x00, 0x89, 0x5a, 0x20,
	0x82, 0x04, 0x41, 0x4a, 0x91, 0xb8, 0xa5, 0xa0, 0x22, 0x45, 0x42, 0x50, 0xb9, 0xe4, 0x8a, 0x8b,
	0xc8, 0xd8, 0x4b, 0xbb, 0xaa, 0xff, 0xd8, 0xdd, 0x08, 0xf5, 0xd1, 0x78, 0x0e, 0x5e, 0x85, 0x07,
	0x60, 0x77, 0xbc, 0x76, 0x36, 0x49, 0xab, 0xc0, 0x4d, 0xb4, 0x33, 0xe7, 0xcc, 0xec, 0x9c, 0xb3,
	0xe3, 0xc0, 0xc1, 0x52, 0x50, 0x2e, 0x5e, 0xe2, 0xef, 0xa4, 0xe4, 0x85, 0x2c, 0x88, 0x8b, 0x41,
	0xd0, 0x05, 0xf7, 0x34, 0x2b, 0xe5, 0x75, 0xf0, 0x05, 0xe0, 0x8c, 0xf2, 0x8c, 0x09, 0xc1, 0x8a,
	0x9c, 0xdc, 0x81, 0x3d, 0x96, 0xf8, 0xad, 0x47, 0xad, 0xb1, 0x1b, 0xaa, 0x13, 0x21, 0xe0, 0xe4,
	0x51, 0x46, 0xfd, 0x3d, 0x95, 0xf1, 0x42, 0x3c, 0x93, 0x7d, 0x68, 0x5f, 0xd1, 0x6b, 0xbf, 0x8d,
	0x29, 0x7d, 0x24, 0x87, 0xd0, 0xe5, 0x45, 0x4a, 0x17, 0xaa, 0xd4, 0xc1, 0xd2, 0x8e, 0x0e, 0x67,
	0x49, 0xb0, 0x00, 0x27, 0x54, 0xa7, 0xbf, 0x6a, 0x7b, 0x0c, 0xfd, 0xb2, 0x19, 0x44, 0xa8, 0xf6,
	0xed, 0x71, 0x7f, 0x7a, 0x30, 0xa9, 0x66, 0x5f, 0x8d, 0x18, 0xda, 0xac, 0xe0, 0x05, 0xf4, 0xf4,
	0x05, 0x1f, 0x98, 0x90, 0xe4, 0x08, 0x5c, 0x7d, 0xad, 0x50, 0xf7, 0xe8, 0xd2, 0xbe, 0x29, 0xd5,
	0x78, 0x58, 0x21, 0xc1, 0x10, 0xf6, 0x66, 0xc9, 0xe6, 0x34, 0xc1, 0x1b, 0xf8, 0xff, 0x44, 0xf5,
	0xbb, 0xc8, 0x43, 0xfa, 0x7d, 0x49, 0x55, 0x27, 0x4b, 0x4f, 0xcb, 0xd6, 0x43, 0xee, 0x41, 0x87,
	0x66, 0x11, 0x4b, 0x85, 0x9a, 0xbc, 0xad, 0x26, 0x37, 0x51, 0xf0, 0xbb, 0x05, 0xce, 0x5c, 0xdd,
	0xb6, 0x25, 0x74, 0x08, 0x2e, 0x52, 0x8c, 0xd2, 0x2a, 0x20, 0x0f, 0x01, 0xbe, 0x31, 0x2e, 0xe4,
	0x02, 0x4d, 0xa8, 0x8c, 0xf4, 0x30, 0xf3, 0x51, 0x3b, 0x71, 0x1f, 0xbc, 0x34, 0xaa, 0x51, 0x07,
	0xd1, 0x9e, 0x4e, 0x20, 0x58, 0x5b, 0xe7, 0x5a, 0xd6, 0x1d, 0xc1, 0x20, 0x8a, 0x63, 0x2a, 0xc4,
	0x42, 0x16, 0x57, 0x34, 0xf7, 0x3b, 0x88, 0xf5, 0xab, 0xdc, 0x67, 0x9d, 0x22, 0x3e, 0x74, 0x4b,
	0x16, 0xcb, 0x25, 0xa7, 0x7e, 0x17, 0xd1, 0x3a, 0xd4, 0x9a, 0x84, 0x8c, 0xe4, 0x52, 0xf8, 0x1e,
	0x02, 0x26, 0x5a, 0xd9, 0x09, 0xb7, 0xda, 0xa9, 0xdc, 0x3f, 0x49, 0x53, 0x2d, 0x1c, 0xe9, 0x48,
	0xd8, 0x70, 0x5f, 0x83, 0xa1, 0xd9, 0xb9, 0x9f, 0x2d, 0xd8, 0x7f, 0x4f, 0x65, 0x7c, 0x89, 0x15,
	0x67, 0x11, 0x8f, 0x32, 0xa1, 0x1d, 0x4a, 0x59, 0xc6, 0xa4, 0x31, 0xad, 0x0a, 0xb4, 0xca, 0x32,
	0xba, 0xa8, 0x16, 0xc4, 0x0d, 0xf1, 0xac, 0x25, 0x14, 0x3c, 0xa1, 0xfc, 0x6d, 0xbd, 0x7b, 0x75,
	0xd8, 0x78, 0xe2, 0x58, 0x9e, 0x3c, 0x00, 0x2f, 0x61, 0x9c, 0xc6, 0x52, 0xed, 0x89, 0x31, 0x64,
	0x95, 0xb0, 0x44, 0x77, 0xd7, 0x44, 0x5b, 0x2f, 0xdf, 0x53, 0x3a, 0x9a, 0x97, 0x9f, 0xfe, 0x72,
	0xc0, 0xcd, 0x58, 0xcc, 0x0b, 0xf2, 0x1c, 0x3c, 0xbd, 0x6e, 0xda, 0x07, 0x41, 0x06, 0x46, 0x26,
	0x7e, 0x4b, 0xa3, 0xbb, 0x96, 0x47, 0x9a, 0x13, 0xfc, 0x47, 0x9e, 0x01, 0xbc, 0xe3, 0x34, 0x92,
	0x14, 0xbf, 0x03, 0xdb, 0xc4, 0xd1, 0x5a, 0xad, 0xa2, 0x3e, 0x85, 0xde, 0x69, 0xc2, 0xe4, 0x6e,
	0xe2, 0x63, 0xe8, 0x9d, 0x5f, 0x16, 0x3f, 0x90, 0xe8, 0x19, 0x6c, 0x96, 0x8c, 0xec, 0x1a, 0xc5,
	0x9a, 0x02, 0x98, 0xad, 0xd6, 0xbc, 0xa1, 0x01, 0xd7, 0x16, 0x7d, 0xab, 0xf3, 0x2b, 0x18, 0xcc,
	0xf3, 0x7f, 0xae, 0x7a, 0x5d, 0x39, 0x52, 0xed, 0xc1, 0xa1, 0x01, 0x37, 0x1f, 0xba, 0x31, 0xa7,
	0xde, 0x18, 0x55, 0xf8, 0x04, 0xbc, 0x86, 0x76, 0x93, 0x12, 0x9d, 0xaf, 0x3c, 0x9c, 0x97, 0x89,
	0xf2, 0x10, 0x79, 0x36, 0xb8, 0x35, 0xca, 0x18, 0xfa, 0xe7, 0x4b, 0x51, 0xd2, 0x3c, 0xd9, 0xec,
	0x79, 0x03, 0x33, 0x54, 0x62, 0x0a, 0x4e, 0x77, 0x31, 0x9b, 0x27, 0xdc, 0x7d, 0xfd, 0x44, 0x2d,
	0x38, 0xcb, 0x93, 0x4f, 0xfc, 0xb6, 0x82, 0x75, 0x65, 0x5f, 0x3b, 0xf8, 0x9f, 0x7c, 0xfc, 0x27,
	0x00, 0x00, 0xff, 0xff, 0x29, 0x20, 0x8d, 0x84, 0xa8, 0x05, 0x00, 0x00,
}
