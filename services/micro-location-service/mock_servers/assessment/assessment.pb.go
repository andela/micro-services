// Code generated by protoc-gen-go.
// source: assessment/assessment.proto
// DO NOT EDIT!

/*
Package assessment is a generated protocol buffer package.

It is generated from these files:
	assessment/assessment.proto

It has these top-level messages:
	ScoreIdRequest
	ScoreQuery
	Score
	ScoreRequest
	ScoreList
	Evaluator
	EvaluatorList
	SkillRequest
	SkillIdRequest
	Skill
	Empty
	SkillList
	ScoreGuidelineRequest
	ScoreGuidelineEditRequest
	ScoreGuidelineEditRequests
	ScoreGuidelineIdRequest
	ScoreGuidelineIds
	ScoreGuideline
	ScoreGuidelineList
*/
package assessment

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SkillType int32

const (
	SkillType_SOFT SkillType = 0
	SkillType_TECH SkillType = 1
	SkillType_TOOL SkillType = 2
	SkillType_LANG SkillType = 3
)

var SkillType_name = map[int32]string{
	0: "SOFT",
	1: "TECH",
	2: "TOOL",
	3: "LANG",
}
var SkillType_value = map[string]int32{
	"SOFT": 0,
	"TECH": 1,
	"TOOL": 2,
	"LANG": 3,
}

func (x SkillType) String() string {
	return proto.EnumName(SkillType_name, int32(x))
}
func (SkillType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ScoreType int32

const (
	ScoreType_NONE  ScoreType = 0
	ScoreType_STAFF ScoreType = 1
	ScoreType_PEER  ScoreType = 2
	ScoreType_SELF  ScoreType = 3
)

var ScoreType_name = map[int32]string{
	0: "NONE",
	1: "STAFF",
	2: "PEER",
	3: "SELF",
}
var ScoreType_value = map[string]int32{
	"NONE":  0,
	"STAFF": 1,
	"PEER":  2,
	"SELF":  3,
}

func (x ScoreType) String() string {
	return proto.EnumName(ScoreType_name, int32(x))
}
func (ScoreType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Level int32

const (
	Level_BOOTCAMP        Level = 0
	Level_D0A_MONTH_ONE   Level = 1
	Level_D0B_SIMULATIONS Level = 2
	Level_D1_DEVELOPER    Level = 3
	Level_D2_DEVELOPER    Level = 4
	Level_D3_DEVELOPER    Level = 5
	Level_D4_DEVELOPER    Level = 6
)

var Level_name = map[int32]string{
	0: "BOOTCAMP",
	1: "D0A_MONTH_ONE",
	2: "D0B_SIMULATIONS",
	3: "D1_DEVELOPER",
	4: "D2_DEVELOPER",
	5: "D3_DEVELOPER",
	6: "D4_DEVELOPER",
}
var Level_value = map[string]int32{
	"BOOTCAMP":        0,
	"D0A_MONTH_ONE":   1,
	"D0B_SIMULATIONS": 2,
	"D1_DEVELOPER":    3,
	"D2_DEVELOPER":    4,
	"D3_DEVELOPER":    5,
	"D4_DEVELOPER":    6,
}

func (x Level) String() string {
	return proto.EnumName(Level_name, int32(x))
}
func (Level) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type ScoreIdRequest struct {
	Id int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *ScoreIdRequest) Reset()                    { *m = ScoreIdRequest{} }
func (m *ScoreIdRequest) String() string            { return proto.CompactTextString(m) }
func (*ScoreIdRequest) ProtoMessage()               {}
func (*ScoreIdRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ScoreQuery struct {
	SkillId      int32     `protobuf:"varint,1,opt,name=skill_id,json=skillId" json:"skill_id,omitempty"`
	Type         ScoreType `protobuf:"varint,2,opt,name=type,enum=assessment.ScoreType" json:"type,omitempty"`
	Limit        int32     `protobuf:"varint,3,opt,name=limit" json:"limit,omitempty"`
	Page         int32     `protobuf:"varint,4,opt,name=page" json:"page,omitempty"`
	EvaluatorUid string    `protobuf:"bytes,5,opt,name=evaluator_uid,json=evaluatorUid" json:"evaluator_uid,omitempty"`
	EvaluateeUid string    `protobuf:"bytes,6,opt,name=evaluatee_uid,json=evaluateeUid" json:"evaluatee_uid,omitempty"`
	StartDate    string    `protobuf:"bytes,7,opt,name=start_date,json=startDate" json:"start_date,omitempty"`
	EndDate      string    `protobuf:"bytes,8,opt,name=end_date,json=endDate" json:"end_date,omitempty"`
}

func (m *ScoreQuery) Reset()                    { *m = ScoreQuery{} }
func (m *ScoreQuery) String() string            { return proto.CompactTextString(m) }
func (*ScoreQuery) ProtoMessage()               {}
func (*ScoreQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Score struct {
	Id            int32         `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	EvaluateeUid  string        `protobuf:"bytes,2,opt,name=evaluatee_uid,json=evaluateeUid" json:"evaluatee_uid,omitempty"`
	EvaluatorUid  string        `protobuf:"bytes,3,opt,name=evaluator_uid,json=evaluatorUid" json:"evaluator_uid,omitempty"`
	EvaluatorName string        `protobuf:"bytes,4,opt,name=evaluator_name,json=evaluatorName" json:"evaluator_name,omitempty"`
	Value         int32         `protobuf:"varint,5,opt,name=value" json:"value,omitempty"`
	Comment       string        `protobuf:"bytes,6,opt,name=comment" json:"comment,omitempty"`
	SkillId       int32         `protobuf:"varint,7,opt,name=skill_id,json=skillId" json:"skill_id,omitempty"`
	CreatedAt     string        `protobuf:"bytes,8,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	Type          ScoreType     `protobuf:"varint,9,opt,name=type,enum=assessment.ScoreType" json:"type,omitempty"`
	Skill         *SkillRequest `protobuf:"bytes,10,opt,name=skill" json:"skill,omitempty"`
}

func (m *Score) Reset()                    { *m = Score{} }
func (m *Score) String() string            { return proto.CompactTextString(m) }
func (*Score) ProtoMessage()               {}
func (*Score) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Score) GetSkill() *SkillRequest {
	if m != nil {
		return m.Skill
	}
	return nil
}

type ScoreRequest struct {
	Scores []*Score `protobuf:"bytes,1,rep,name=scores" json:"scores,omitempty"`
}

func (m *ScoreRequest) Reset()                    { *m = ScoreRequest{} }
func (m *ScoreRequest) String() string            { return proto.CompactTextString(m) }
func (*ScoreRequest) ProtoMessage()               {}
func (*ScoreRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ScoreRequest) GetScores() []*Score {
	if m != nil {
		return m.Scores
	}
	return nil
}

type ScoreList struct {
	Total  int32    `protobuf:"varint,1,opt,name=total" json:"total,omitempty"`
	Scores []*Score `protobuf:"bytes,2,rep,name=scores" json:"scores,omitempty"`
}

func (m *ScoreList) Reset()                    { *m = ScoreList{} }
func (m *ScoreList) String() string            { return proto.CompactTextString(m) }
func (*ScoreList) ProtoMessage()               {}
func (*ScoreList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ScoreList) GetScores() []*Score {
	if m != nil {
		return m.Scores
	}
	return nil
}

type Evaluator struct {
	EvaluatorUid  string `protobuf:"bytes,1,opt,name=evaluator_uid,json=evaluatorUid" json:"evaluator_uid,omitempty"`
	EvaluatorName string `protobuf:"bytes,2,opt,name=evaluator_name,json=evaluatorName" json:"evaluator_name,omitempty"`
}

func (m *Evaluator) Reset()                    { *m = Evaluator{} }
func (m *Evaluator) String() string            { return proto.CompactTextString(m) }
func (*Evaluator) ProtoMessage()               {}
func (*Evaluator) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type EvaluatorList struct {
	Evaluators []*Evaluator `protobuf:"bytes,1,rep,name=evaluators" json:"evaluators,omitempty"`
}

func (m *EvaluatorList) Reset()                    { *m = EvaluatorList{} }
func (m *EvaluatorList) String() string            { return proto.CompactTextString(m) }
func (*EvaluatorList) ProtoMessage()               {}
func (*EvaluatorList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *EvaluatorList) GetEvaluators() []*Evaluator {
	if m != nil {
		return m.Evaluators
	}
	return nil
}

type SkillRequest struct {
	Id   int32     `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name string    `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Type SkillType `protobuf:"varint,3,opt,name=type,enum=assessment.SkillType" json:"type,omitempty"`
}

func (m *SkillRequest) Reset()                    { *m = SkillRequest{} }
func (m *SkillRequest) String() string            { return proto.CompactTextString(m) }
func (*SkillRequest) ProtoMessage()               {}
func (*SkillRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type SkillIdRequest struct {
	Id int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *SkillIdRequest) Reset()                    { *m = SkillIdRequest{} }
func (m *SkillIdRequest) String() string            { return proto.CompactTextString(m) }
func (*SkillIdRequest) ProtoMessage()               {}
func (*SkillIdRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type Skill struct {
	Id              int32                    `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name            string                   `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Type            SkillType                `protobuf:"varint,3,opt,name=type,enum=assessment.SkillType" json:"type,omitempty"`
	ScoreGuidelines []*ScoreGuidelineRequest `protobuf:"bytes,4,rep,name=scoreGuidelines" json:"scoreGuidelines,omitempty"`
}

func (m *Skill) Reset()                    { *m = Skill{} }
func (m *Skill) String() string            { return proto.CompactTextString(m) }
func (*Skill) ProtoMessage()               {}
func (*Skill) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *Skill) GetScoreGuidelines() []*ScoreGuidelineRequest {
	if m != nil {
		return m.ScoreGuidelines
	}
	return nil
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type SkillList struct {
	Skills []*Skill `protobuf:"bytes,1,rep,name=skills" json:"skills,omitempty"`
}

func (m *SkillList) Reset()                    { *m = SkillList{} }
func (m *SkillList) String() string            { return proto.CompactTextString(m) }
func (*SkillList) ProtoMessage()               {}
func (*SkillList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *SkillList) GetSkills() []*Skill {
	if m != nil {
		return m.Skills
	}
	return nil
}

type ScoreGuidelineRequest struct {
	Id          int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Level       Level  `protobuf:"varint,2,opt,name=level,enum=assessment.Level" json:"level,omitempty"`
	Score       int32  `protobuf:"varint,3,opt,name=score" json:"score,omitempty"`
	Description string `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	SkillId     int32  `protobuf:"varint,5,opt,name=skill_id,json=skillId" json:"skill_id,omitempty"`
}

func (m *ScoreGuidelineRequest) Reset()                    { *m = ScoreGuidelineRequest{} }
func (m *ScoreGuidelineRequest) String() string            { return proto.CompactTextString(m) }
func (*ScoreGuidelineRequest) ProtoMessage()               {}
func (*ScoreGuidelineRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

type ScoreGuidelineEditRequest struct {
	Id          int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
}

func (m *ScoreGuidelineEditRequest) Reset()                    { *m = ScoreGuidelineEditRequest{} }
func (m *ScoreGuidelineEditRequest) String() string            { return proto.CompactTextString(m) }
func (*ScoreGuidelineEditRequest) ProtoMessage()               {}
func (*ScoreGuidelineEditRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

type ScoreGuidelineEditRequests struct {
	ScoreGuidelines []*ScoreGuidelineEditRequest `protobuf:"bytes,1,rep,name=scoreGuidelines" json:"scoreGuidelines,omitempty"`
}

func (m *ScoreGuidelineEditRequests) Reset()                    { *m = ScoreGuidelineEditRequests{} }
func (m *ScoreGuidelineEditRequests) String() string            { return proto.CompactTextString(m) }
func (*ScoreGuidelineEditRequests) ProtoMessage()               {}
func (*ScoreGuidelineEditRequests) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *ScoreGuidelineEditRequests) GetScoreGuidelines() []*ScoreGuidelineEditRequest {
	if m != nil {
		return m.ScoreGuidelines
	}
	return nil
}

type ScoreGuidelineIdRequest struct {
	Id int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *ScoreGuidelineIdRequest) Reset()                    { *m = ScoreGuidelineIdRequest{} }
func (m *ScoreGuidelineIdRequest) String() string            { return proto.CompactTextString(m) }
func (*ScoreGuidelineIdRequest) ProtoMessage()               {}
func (*ScoreGuidelineIdRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

type ScoreGuidelineIds struct {
	Ids []int32 `protobuf:"varint,1,rep,name=ids" json:"ids,omitempty"`
}

func (m *ScoreGuidelineIds) Reset()                    { *m = ScoreGuidelineIds{} }
func (m *ScoreGuidelineIds) String() string            { return proto.CompactTextString(m) }
func (*ScoreGuidelineIds) ProtoMessage()               {}
func (*ScoreGuidelineIds) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

type ScoreGuideline struct {
	Id          int32         `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Level       Level         `protobuf:"varint,2,opt,name=level,enum=assessment.Level" json:"level,omitempty"`
	Score       int32         `protobuf:"varint,3,opt,name=score" json:"score,omitempty"`
	Description string        `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	SkillId     int32         `protobuf:"varint,5,opt,name=skill_id,json=skillId" json:"skill_id,omitempty"`
	Skill       *SkillRequest `protobuf:"bytes,6,opt,name=skill" json:"skill,omitempty"`
}

func (m *ScoreGuideline) Reset()                    { *m = ScoreGuideline{} }
func (m *ScoreGuideline) String() string            { return proto.CompactTextString(m) }
func (*ScoreGuideline) ProtoMessage()               {}
func (*ScoreGuideline) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *ScoreGuideline) GetSkill() *SkillRequest {
	if m != nil {
		return m.Skill
	}
	return nil
}

type ScoreGuidelineList struct {
	ScoreGuidelines []*ScoreGuideline `protobuf:"bytes,1,rep,name=scoreGuidelines" json:"scoreGuidelines,omitempty"`
}

func (m *ScoreGuidelineList) Reset()                    { *m = ScoreGuidelineList{} }
func (m *ScoreGuidelineList) String() string            { return proto.CompactTextString(m) }
func (*ScoreGuidelineList) ProtoMessage()               {}
func (*ScoreGuidelineList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *ScoreGuidelineList) GetScoreGuidelines() []*ScoreGuideline {
	if m != nil {
		return m.ScoreGuidelines
	}
	return nil
}

func init() {
	proto.RegisterType((*ScoreIdRequest)(nil), "assessment.ScoreIdRequest")
	proto.RegisterType((*ScoreQuery)(nil), "assessment.ScoreQuery")
	proto.RegisterType((*Score)(nil), "assessment.Score")
	proto.RegisterType((*ScoreRequest)(nil), "assessment.ScoreRequest")
	proto.RegisterType((*ScoreList)(nil), "assessment.ScoreList")
	proto.RegisterType((*Evaluator)(nil), "assessment.Evaluator")
	proto.RegisterType((*EvaluatorList)(nil), "assessment.EvaluatorList")
	proto.RegisterType((*SkillRequest)(nil), "assessment.SkillRequest")
	proto.RegisterType((*SkillIdRequest)(nil), "assessment.SkillIdRequest")
	proto.RegisterType((*Skill)(nil), "assessment.Skill")
	proto.RegisterType((*Empty)(nil), "assessment.Empty")
	proto.RegisterType((*SkillList)(nil), "assessment.SkillList")
	proto.RegisterType((*ScoreGuidelineRequest)(nil), "assessment.scoreGuidelineRequest")
	proto.RegisterType((*ScoreGuidelineEditRequest)(nil), "assessment.scoreGuidelineEditRequest")
	proto.RegisterType((*ScoreGuidelineEditRequests)(nil), "assessment.scoreGuidelineEditRequests")
	proto.RegisterType((*ScoreGuidelineIdRequest)(nil), "assessment.scoreGuidelineIdRequest")
	proto.RegisterType((*ScoreGuidelineIds)(nil), "assessment.scoreGuidelineIds")
	proto.RegisterType((*ScoreGuideline)(nil), "assessment.scoreGuideline")
	proto.RegisterType((*ScoreGuidelineList)(nil), "assessment.scoreGuidelineList")
	proto.RegisterEnum("assessment.SkillType", SkillType_name, SkillType_value)
	proto.RegisterEnum("assessment.ScoreType", ScoreType_name, ScoreType_value)
	proto.RegisterEnum("assessment.Level", Level_name, Level_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Micro service

type MicroClient interface {
	CreateScore(ctx context.Context, in *ScoreRequest, opts ...grpc.CallOption) (*Empty, error)
	ScoreEvaluators(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*EvaluatorList, error)
	GetScore(ctx context.Context, in *ScoreIdRequest, opts ...grpc.CallOption) (*Score, error)
	ListScores(ctx context.Context, in *ScoreQuery, opts ...grpc.CallOption) (*ScoreList, error)
	CreateSkill(ctx context.Context, in *Skill, opts ...grpc.CallOption) (*Empty, error)
	DeleteSkill(ctx context.Context, in *SkillIdRequest, opts ...grpc.CallOption) (*Empty, error)
	UpdateSkill(ctx context.Context, in *SkillRequest, opts ...grpc.CallOption) (*Empty, error)
	GetSkill(ctx context.Context, in *SkillIdRequest, opts ...grpc.CallOption) (*Skill, error)
	ListSkills(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SkillList, error)
	CreateScoreGuideline(ctx context.Context, in *ScoreGuidelineRequest, opts ...grpc.CallOption) (*Empty, error)
	UpdateScoreGuideline(ctx context.Context, in *ScoreGuidelineEditRequests, opts ...grpc.CallOption) (*Empty, error)
	GetScoreGuideline(ctx context.Context, in *ScoreGuidelineIdRequest, opts ...grpc.CallOption) (*ScoreGuideline, error)
	ListScoreGuidelines(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ScoreGuidelineList, error)
	FetchScoreGuidelines(ctx context.Context, in *ScoreGuidelineIds, opts ...grpc.CallOption) (*ScoreGuidelineList, error)
}

type microClient struct {
	cc *grpc.ClientConn
}

func NewMicroClient(cc *grpc.ClientConn) MicroClient {
	return &microClient{cc}
}

func (c *microClient) CreateScore(ctx context.Context, in *ScoreRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/assessment.micro/CreateScore", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microClient) ScoreEvaluators(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*EvaluatorList, error) {
	out := new(EvaluatorList)
	err := grpc.Invoke(ctx, "/assessment.micro/ScoreEvaluators", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microClient) GetScore(ctx context.Context, in *ScoreIdRequest, opts ...grpc.CallOption) (*Score, error) {
	out := new(Score)
	err := grpc.Invoke(ctx, "/assessment.micro/GetScore", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microClient) ListScores(ctx context.Context, in *ScoreQuery, opts ...grpc.CallOption) (*ScoreList, error) {
	out := new(ScoreList)
	err := grpc.Invoke(ctx, "/assessment.micro/ListScores", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microClient) CreateSkill(ctx context.Context, in *Skill, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/assessment.micro/CreateSkill", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microClient) DeleteSkill(ctx context.Context, in *SkillIdRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/assessment.micro/DeleteSkill", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microClient) UpdateSkill(ctx context.Context, in *SkillRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/assessment.micro/UpdateSkill", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microClient) GetSkill(ctx context.Context, in *SkillIdRequest, opts ...grpc.CallOption) (*Skill, error) {
	out := new(Skill)
	err := grpc.Invoke(ctx, "/assessment.micro/GetSkill", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microClient) ListSkills(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SkillList, error) {
	out := new(SkillList)
	err := grpc.Invoke(ctx, "/assessment.micro/ListSkills", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microClient) CreateScoreGuideline(ctx context.Context, in *ScoreGuidelineRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/assessment.micro/CreateScoreGuideline", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microClient) UpdateScoreGuideline(ctx context.Context, in *ScoreGuidelineEditRequests, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/assessment.micro/UpdateScoreGuideline", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microClient) GetScoreGuideline(ctx context.Context, in *ScoreGuidelineIdRequest, opts ...grpc.CallOption) (*ScoreGuideline, error) {
	out := new(ScoreGuideline)
	err := grpc.Invoke(ctx, "/assessment.micro/GetScoreGuideline", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microClient) ListScoreGuidelines(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ScoreGuidelineList, error) {
	out := new(ScoreGuidelineList)
	err := grpc.Invoke(ctx, "/assessment.micro/ListScoreGuidelines", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microClient) FetchScoreGuidelines(ctx context.Context, in *ScoreGuidelineIds, opts ...grpc.CallOption) (*ScoreGuidelineList, error) {
	out := new(ScoreGuidelineList)
	err := grpc.Invoke(ctx, "/assessment.micro/FetchScoreGuidelines", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Micro service

type MicroServer interface {
	CreateScore(context.Context, *ScoreRequest) (*Empty, error)
	ScoreEvaluators(context.Context, *Empty) (*EvaluatorList, error)
	GetScore(context.Context, *ScoreIdRequest) (*Score, error)
	ListScores(context.Context, *ScoreQuery) (*ScoreList, error)
	CreateSkill(context.Context, *Skill) (*Empty, error)
	DeleteSkill(context.Context, *SkillIdRequest) (*Empty, error)
	UpdateSkill(context.Context, *SkillRequest) (*Empty, error)
	GetSkill(context.Context, *SkillIdRequest) (*Skill, error)
	ListSkills(context.Context, *Empty) (*SkillList, error)
	CreateScoreGuideline(context.Context, *ScoreGuidelineRequest) (*Empty, error)
	UpdateScoreGuideline(context.Context, *ScoreGuidelineEditRequests) (*Empty, error)
	GetScoreGuideline(context.Context, *ScoreGuidelineIdRequest) (*ScoreGuideline, error)
	ListScoreGuidelines(context.Context, *Empty) (*ScoreGuidelineList, error)
	FetchScoreGuidelines(context.Context, *ScoreGuidelineIds) (*ScoreGuidelineList, error)
}

func RegisterMicroServer(s *grpc.Server, srv MicroServer) {
	s.RegisterService(&_Micro_serviceDesc, srv)
}

func _Micro_CreateScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroServer).CreateScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assessment.micro/CreateScore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroServer).CreateScore(ctx, req.(*ScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Micro_ScoreEvaluators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroServer).ScoreEvaluators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assessment.micro/ScoreEvaluators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroServer).ScoreEvaluators(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Micro_GetScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScoreIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroServer).GetScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assessment.micro/GetScore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroServer).GetScore(ctx, req.(*ScoreIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Micro_ListScores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScoreQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroServer).ListScores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assessment.micro/ListScores",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroServer).ListScores(ctx, req.(*ScoreQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Micro_CreateSkill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Skill)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroServer).CreateSkill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assessment.micro/CreateSkill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroServer).CreateSkill(ctx, req.(*Skill))
	}
	return interceptor(ctx, in, info, handler)
}

func _Micro_DeleteSkill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SkillIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroServer).DeleteSkill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assessment.micro/DeleteSkill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroServer).DeleteSkill(ctx, req.(*SkillIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Micro_UpdateSkill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SkillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroServer).UpdateSkill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assessment.micro/UpdateSkill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroServer).UpdateSkill(ctx, req.(*SkillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Micro_GetSkill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SkillIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroServer).GetSkill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assessment.micro/GetSkill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroServer).GetSkill(ctx, req.(*SkillIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Micro_ListSkills_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroServer).ListSkills(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assessment.micro/ListSkills",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroServer).ListSkills(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Micro_CreateScoreGuideline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScoreGuidelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroServer).CreateScoreGuideline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assessment.micro/CreateScoreGuideline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroServer).CreateScoreGuideline(ctx, req.(*ScoreGuidelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Micro_UpdateScoreGuideline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScoreGuidelineEditRequests)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroServer).UpdateScoreGuideline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assessment.micro/UpdateScoreGuideline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroServer).UpdateScoreGuideline(ctx, req.(*ScoreGuidelineEditRequests))
	}
	return interceptor(ctx, in, info, handler)
}

func _Micro_GetScoreGuideline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScoreGuidelineIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroServer).GetScoreGuideline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assessment.micro/GetScoreGuideline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroServer).GetScoreGuideline(ctx, req.(*ScoreGuidelineIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Micro_ListScoreGuidelines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroServer).ListScoreGuidelines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assessment.micro/ListScoreGuidelines",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroServer).ListScoreGuidelines(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Micro_FetchScoreGuidelines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScoreGuidelineIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroServer).FetchScoreGuidelines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/assessment.micro/FetchScoreGuidelines",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroServer).FetchScoreGuidelines(ctx, req.(*ScoreGuidelineIds))
	}
	return interceptor(ctx, in, info, handler)
}

var _Micro_serviceDesc = grpc.ServiceDesc{
	ServiceName: "assessment.micro",
	HandlerType: (*MicroServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateScore",
			Handler:    _Micro_CreateScore_Handler,
		},
		{
			MethodName: "ScoreEvaluators",
			Handler:    _Micro_ScoreEvaluators_Handler,
		},
		{
			MethodName: "GetScore",
			Handler:    _Micro_GetScore_Handler,
		},
		{
			MethodName: "ListScores",
			Handler:    _Micro_ListScores_Handler,
		},
		{
			MethodName: "CreateSkill",
			Handler:    _Micro_CreateSkill_Handler,
		},
		{
			MethodName: "DeleteSkill",
			Handler:    _Micro_DeleteSkill_Handler,
		},
		{
			MethodName: "UpdateSkill",
			Handler:    _Micro_UpdateSkill_Handler,
		},
		{
			MethodName: "GetSkill",
			Handler:    _Micro_GetSkill_Handler,
		},
		{
			MethodName: "ListSkills",
			Handler:    _Micro_ListSkills_Handler,
		},
		{
			MethodName: "CreateScoreGuideline",
			Handler:    _Micro_CreateScoreGuideline_Handler,
		},
		{
			MethodName: "UpdateScoreGuideline",
			Handler:    _Micro_UpdateScoreGuideline_Handler,
		},
		{
			MethodName: "GetScoreGuideline",
			Handler:    _Micro_GetScoreGuideline_Handler,
		},
		{
			MethodName: "ListScoreGuidelines",
			Handler:    _Micro_ListScoreGuidelines_Handler,
		},
		{
			MethodName: "FetchScoreGuidelines",
			Handler:    _Micro_FetchScoreGuidelines_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("assessment/assessment.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1037 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xcc, 0x57, 0x5b, 0x6f, 0xe3, 0x54,
	0x10, 0xde, 0x38, 0x71, 0x2e, 0xd3, 0x36, 0x4d, 0xcf, 0x76, 0xc1, 0x0d, 0x5a, 0x54, 0xbc, 0x2a,
	0xd0, 0x7d, 0x28, 0x4b, 0xbb, 0x8b, 0x40, 0x5c, 0xa4, 0x6c, 0xe3, 0x74, 0x0b, 0x69, 0x5c, 0x9c,
	0x74, 0x57, 0x42, 0x42, 0x51, 0x88, 0x8f, 0xc0, 0x22, 0x37, 0x62, 0xb7, 0x52, 0xdf, 0x78, 0xe1,
	0x97, 0xf0, 0x77, 0xe0, 0x85, 0x5f, 0xc4, 0x9c, 0xf1, 0x3d, 0xc7, 0x6e, 0x8a, 0xc4, 0xc3, 0xbe,
	0x9d, 0x33, 0xe7, 0x9b, 0x6f, 0xce, 0x7c, 0x33, 0x67, 0x9c, 0xc0, 0x7b, 0x23, 0xd7, 0xe5, 0xae,
	0x3b, 0xe5, 0x33, 0xef, 0x93, 0x78, 0x79, 0xb4, 0x58, 0xce, 0xbd, 0x39, 0x83, 0xd8, 0xa2, 0xef,
	0x43, 0xbd, 0x3f, 0x9e, 0x2f, 0xf9, 0xb9, 0x6d, 0xf1, 0xdf, 0xae, 0xb9, 0xeb, 0xb1, 0x3a, 0x28,
	0x8e, 0xad, 0x15, 0xf6, 0x0b, 0x1f, 0xab, 0x16, 0xae, 0xf4, 0xdf, 0x15, 0x00, 0x82, 0x7c, 0x7f,
	0xcd, 0x97, 0xb7, 0x6c, 0x0f, 0xaa, 0xee, 0xaf, 0xce, 0x64, 0x32, 0x8c, 0x40, 0x15, 0xda, 0x9f,
	0xdb, 0xec, 0x10, 0x4a, 0xde, 0xed, 0x82, 0x6b, 0x0a, 0x9a, 0xeb, 0xc7, 0x8f, 0x8e, 0x12, 0x81,
	0x89, 0x60, 0x80, 0x87, 0x16, 0x41, 0xd8, 0x2e, 0xa8, 0x13, 0x67, 0xea, 0x78, 0x5a, 0x91, 0x28,
	0xfc, 0x0d, 0x63, 0x50, 0x5a, 0x8c, 0x7e, 0xe6, 0x5a, 0x89, 0x8c, 0xb4, 0x66, 0x4f, 0x60, 0x8b,
	0xdf, 0x8c, 0x26, 0xd7, 0x23, 0x6f, 0xbe, 0x1c, 0x5e, 0x63, 0x50, 0x15, 0x0f, 0x6b, 0xd6, 0x66,
	0x64, 0xbc, 0x72, 0xec, 0x04, 0x88, 0x73, 0x02, 0x95, 0x53, 0x20, 0xce, 0x05, 0xe8, 0x31, 0x80,
	0xeb, 0x8d, 0x96, 0xde, 0xd0, 0x46, 0x8b, 0x56, 0x21, 0x44, 0x8d, 0x2c, 0x6d, 0x34, 0x88, 0xc4,
	0xf8, 0xcc, 0xf6, 0x0f, 0xab, 0x74, 0x58, 0xc1, 0xbd, 0x38, 0xd2, 0xff, 0x56, 0x40, 0xa5, 0x0c,
	0x56, 0xc5, 0x91, 0x03, 0x2b, 0x19, 0x81, 0xa5, 0x14, 0x8a, 0x19, 0x29, 0x1c, 0x40, 0x3d, 0x06,
	0xcd, 0x46, 0x53, 0x5f, 0x85, 0x9a, 0x15, 0xbb, 0xf6, 0xd0, 0x28, 0x84, 0x13, 0x7b, 0x4e, 0x32,
	0xa0, 0x70, 0xb4, 0x61, 0x1a, 0x54, 0xc6, 0xf3, 0xa9, 0x50, 0x3a, 0xc8, 0x3c, 0xdc, 0xa6, 0xca,
	0x55, 0x49, 0x97, 0x0b, 0xf5, 0x18, 0x2f, 0x39, 0x5e, 0xd2, 0x1e, 0x8e, 0xbc, 0x20, 0xe5, 0x5a,
	0x60, 0x69, 0x79, 0x51, 0x35, 0x6b, 0xeb, 0xab, 0x79, 0x04, 0x2a, 0x91, 0x6a, 0x80, 0xd8, 0x8d,
	0x63, 0x2d, 0x85, 0x15, 0x07, 0x41, 0x6f, 0x59, 0x3e, 0x4c, 0xff, 0x02, 0x36, 0x89, 0x22, 0x6c,
	0xb9, 0x43, 0x28, 0xbb, 0x62, 0xef, 0xa2, 0xb2, 0x45, 0x24, 0xd8, 0x91, 0x82, 0x59, 0x01, 0x40,
	0xef, 0x42, 0x8d, 0x0c, 0x5d, 0x07, 0xfd, 0x50, 0x0c, 0x6f, 0xee, 0x8d, 0x26, 0x41, 0x41, 0xfc,
	0x4d, 0x82, 0x4d, 0x59, 0xc7, 0xf6, 0x06, 0x6a, 0x46, 0x28, 0xaf, 0x5c, 0xa6, 0xc2, 0xbd, 0xca,
	0xa4, 0x64, 0x94, 0x49, 0xef, 0xc0, 0x56, 0x44, 0x4c, 0x57, 0x7d, 0x01, 0x10, 0x21, 0xc2, 0x34,
	0x53, 0x9a, 0x46, 0x70, 0x2b, 0x01, 0xd4, 0x7f, 0x44, 0xa5, 0x12, 0x02, 0x4a, 0xfd, 0x87, 0x2f,
	0x26, 0x71, 0x09, 0x5a, 0x47, 0x85, 0x2b, 0x66, 0x14, 0x4e, 0x70, 0xc5, 0x85, 0xa3, 0xd7, 0xef,
	0x77, 0x43, 0xde, 0xeb, 0xff, 0xb3, 0x80, 0xad, 0x2f, 0x20, 0xff, 0x73, 0x68, 0xf6, 0x1d, 0x6c,
	0x53, 0x11, 0xce, 0x50, 0x69, 0x3e, 0x71, 0x66, 0x58, 0xae, 0x12, 0xa9, 0xf2, 0x41, 0xd2, 0x2b,
	0x0d, 0x09, 0xdb, 0x68, 0xd5, 0x53, 0xaf, 0x80, 0x6a, 0x4c, 0x17, 0xde, 0xad, 0xfe, 0x19, 0xb6,
	0x87, 0x08, 0x44, 0x9a, 0x8b, 0x46, 0x10, 0x9b, 0xec, 0xb6, 0x22, 0x59, 0x03, 0x80, 0x48, 0xf3,
	0x51, 0x66, 0x2c, 0x29, 0xed, 0x8f, 0x70, 0x72, 0xf1, 0x1b, 0x3e, 0x09, 0xa6, 0x5c, 0x8a, 0xb3,
	0x2b, 0x0e, 0x2c, 0xff, 0x5c, 0x34, 0x27, 0x31, 0x86, 0x23, 0x8e, 0x36, 0x6c, 0x1f, 0x36, 0x6c,
	0xee, 0x8e, 0x97, 0xce, 0xc2, 0x73, 0xe6, 0xb3, 0xe0, 0x8d, 0x27, 0x4d, 0xa9, 0x17, 0xab, 0xa6,
	0x5e, 0xac, 0x7e, 0x01, 0x7b, 0xe9, 0x4b, 0x1a, 0xb6, 0xe3, 0xe5, 0x5d, 0x74, 0x25, 0x92, 0x22,
	0x45, 0xd2, 0xa7, 0xd0, 0xcc, 0xa5, 0x73, 0x99, 0x29, 0x17, 0xc8, 0x97, 0xf1, 0x20, 0xbf, 0x40,
	0x09, 0x02, 0xb9, 0x48, 0x87, 0xf0, 0x6e, 0xda, 0x94, 0xdf, 0x75, 0x07, 0xb0, 0xb3, 0x0a, 0x75,
	0x59, 0x03, 0x8a, 0x8e, 0xed, 0x5f, 0x42, 0xb5, 0xc4, 0x52, 0xff, 0xab, 0x00, 0xf5, 0x34, 0xee,
	0x6d, 0x2a, 0x57, 0x3c, 0x16, 0xcb, 0xf7, 0x1b, 0x8b, 0x3f, 0x00, 0x4b, 0x67, 0x43, 0x5d, 0xdc,
	0xce, 0xab, 0x43, 0xf3, 0x8e, 0x87, 0xb2, 0xea, 0xf2, 0xf4, 0x24, 0x78, 0x18, 0xe2, 0x05, 0xb2,
	0x2a, 0x94, 0xfa, 0x66, 0x67, 0xd0, 0x78, 0x20, 0x56, 0x03, 0xe3, 0xf4, 0x55, 0xa3, 0x40, 0x2b,
	0xd3, 0xec, 0x36, 0x14, 0xb1, 0xea, 0xb6, 0x7a, 0x67, 0x8d, 0xe2, 0xd3, 0xe7, 0xc1, 0xb0, 0x0d,
	0x9d, 0x7a, 0x66, 0xcf, 0x40, 0xa7, 0x1a, 0x8e, 0x84, 0x41, 0xab, 0xd3, 0xf1, 0xbd, 0x2e, 0x0d,
	0xc3, 0xf2, 0xbd, 0xfa, 0x46, 0xb7, 0x83, 0x5e, 0x7f, 0xe0, 0xc8, 0x20, 0x69, 0xd9, 0x26, 0x54,
	0x5f, 0x9a, 0xe6, 0xe0, 0xb4, 0x75, 0x71, 0x89, 0x6e, 0x3b, 0xb0, 0xd5, 0x7e, 0xd6, 0x1a, 0x5e,
	0x98, 0xbd, 0xc1, 0xab, 0xa1, 0x60, 0x2a, 0xb0, 0x87, 0xb0, 0xdd, 0x7e, 0xf6, 0x72, 0xd8, 0x3f,
	0xbf, 0xb8, 0xea, 0xb6, 0x06, 0xe7, 0x66, 0xaf, 0x8f, 0x4c, 0x0d, 0xd8, 0x6c, 0x7f, 0x3a, 0x6c,
	0x1b, 0xaf, 0x8d, 0xae, 0x79, 0x89, 0xdc, 0x45, 0xb2, 0x1c, 0x27, 0x2c, 0x25, 0xb2, 0x9c, 0x24,
	0x2c, 0x2a, 0x59, 0x9e, 0x27, 0x2c, 0xe5, 0xe3, 0x7f, 0x70, 0x2a, 0x4c, 0x9d, 0xf1, 0x72, 0xce,
	0xbe, 0x82, 0x8d, 0x53, 0xfa, 0xae, 0xf9, 0x1f, 0x71, 0x4d, 0xfe, 0x20, 0xf8, 0x85, 0x68, 0xa6,
	0xda, 0xc3, 0x9f, 0x28, 0x0f, 0x58, 0x0b, 0xb6, 0x09, 0x14, 0x4d, 0x68, 0x97, 0xc9, 0xb8, 0xe6,
	0x5e, 0xe6, 0x30, 0x17, 0x15, 0x44, 0x8a, 0x2f, 0xa1, 0x7a, 0xc6, 0x3d, 0x3f, 0x7a, 0x53, 0x8a,
	0x1e, 0xbd, 0x83, 0xa6, 0xfc, 0xa9, 0x42, 0xe7, 0xaf, 0x01, 0x04, 0x0d, 0x6d, 0x5d, 0xf6, 0x8e,
	0x04, 0xa1, 0xdf, 0x65, 0x4d, 0xf9, 0x03, 0x1d, 0xc4, 0x7e, 0x11, 0x25, 0x4f, 0x63, 0x5c, 0x1e,
	0x82, 0xd9, 0x59, 0x7f, 0x03, 0x1b, 0x6d, 0x3e, 0xe1, 0xa1, 0x5b, 0x53, 0x72, 0xcb, 0xb9, 0x75,
	0xe8, 0x8f, 0x9a, 0x5f, 0x2d, 0xec, 0x28, 0x6c, 0x6e, 0xf3, 0x67, 0x7b, 0x07, 0x82, 0xfd, 0xb7,
	0xd0, 0x74, 0x86, 0xce, 0x9f, 0x07, 0x82, 0xd1, 0x68, 0xcf, 0xaa, 0x95, 0xfc, 0x61, 0x0a, 0xb4,
	0xea, 0xc1, 0x6e, 0xa2, 0x51, 0xe2, 0xa9, 0xb2, 0xfe, 0x9b, 0x94, 0x9d, 0x46, 0x1f, 0x76, 0x03,
	0x11, 0xd2, 0x7c, 0x1f, 0xde, 0x6b, 0x84, 0xba, 0xd9, 0xa4, 0xaf, 0x61, 0x27, 0x6c, 0xa6, 0x98,
	0xf1, 0x49, 0x3e, 0x63, 0xac, 0xd6, 0x1d, 0x13, 0x03, 0x79, 0xbf, 0x85, 0x87, 0x51, 0x9f, 0xc5,
	0x93, 0x23, 0x4b, 0xbf, 0xf7, 0xf3, 0x79, 0x02, 0x21, 0xdf, 0xc0, 0x6e, 0x87, 0x7b, 0xe3, 0x5f,
	0x56, 0xc9, 0x1e, 0xdf, 0x75, 0x4d, 0x77, 0x3d, 0xf1, 0x4f, 0x65, 0xfa, 0x0b, 0x73, 0xf2, 0x6f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xe7, 0x94, 0x4a, 0xb9, 0xe1, 0x0c, 0x00, 0x00,
}
