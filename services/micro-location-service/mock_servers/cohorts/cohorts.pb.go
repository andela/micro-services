// Code generated by protoc-gen-go.
// source: cohorts/cohorts.proto
// DO NOT EDIT!

/*
Package cohorts is a generated protocol buffer package.

It is generated from these files:
	cohorts/cohorts.proto

It has these top-level messages:
	Empty
	Cohort
	Location
	AllCohorts
	Id
*/
package cohorts

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Cohort struct {
	Id             string    `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Color          string    `protobuf:"bytes,2,opt,name=color" json:"color,omitempty"`
	Hidden         bool      `protobuf:"varint,3,opt,name=hidden" json:"hidden,omitempty"`
	InviteCode     string    `protobuf:"bytes,4,opt,name=invite_code,json=inviteCode" json:"invite_code,omitempty"`
	Name           string    `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
	Story          string    `protobuf:"bytes,6,opt,name=story" json:"story,omitempty"`
	StartedAt      string    `protobuf:"bytes,7,opt,name=started_at,json=startedAt" json:"started_at,omitempty"`
	StartedLevelId string    `protobuf:"bytes,8,opt,name=started_level_id,json=startedLevelId" json:"started_level_id,omitempty"`
	CreatedAt      string    `protobuf:"bytes,9,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	UpdatedAt      string    `protobuf:"bytes,10,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty"`
	LocationId     string    `protobuf:"bytes,11,opt,name=location_id,json=locationId" json:"location_id,omitempty"`
	Location       *Location `protobuf:"bytes,12,opt,name=location" json:"location,omitempty"`
	AuditorId      string    `protobuf:"bytes,13,opt,name=auditor_id,json=auditorId" json:"auditor_id,omitempty"`
	AuditorName    string    `protobuf:"bytes,14,opt,name=auditor_name,json=auditorName" json:"auditor_name,omitempty"`
}

func (m *Cohort) Reset()                    { *m = Cohort{} }
func (m *Cohort) String() string            { return proto.CompactTextString(m) }
func (*Cohort) ProtoMessage()               {}
func (*Cohort) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Cohort) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

type Location struct {
	Id   string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *Location) Reset()                    { *m = Location{} }
func (m *Location) String() string            { return proto.CompactTextString(m) }
func (*Location) ProtoMessage()               {}
func (*Location) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type AllCohorts struct {
	Cohorts []*Cohort `protobuf:"bytes,1,rep,name=cohorts" json:"cohorts,omitempty"`
}

func (m *AllCohorts) Reset()                    { *m = AllCohorts{} }
func (m *AllCohorts) String() string            { return proto.CompactTextString(m) }
func (*AllCohorts) ProtoMessage()               {}
func (*AllCohorts) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *AllCohorts) GetCohorts() []*Cohort {
	if m != nil {
		return m.Cohorts
	}
	return nil
}

type Id struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *Id) Reset()                    { *m = Id{} }
func (m *Id) String() string            { return proto.CompactTextString(m) }
func (*Id) ProtoMessage()               {}
func (*Id) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func init() {
	proto.RegisterType((*Empty)(nil), "cohorts.Empty")
	proto.RegisterType((*Cohort)(nil), "cohorts.Cohort")
	proto.RegisterType((*Location)(nil), "cohorts.Location")
	proto.RegisterType((*AllCohorts)(nil), "cohorts.AllCohorts")
	proto.RegisterType((*Id)(nil), "cohorts.Id")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Micro service

type MicroClient interface {
	List(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AllCohorts, error)
	Get(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Cohort, error)
	Create(ctx context.Context, in *Cohort, opts ...grpc.CallOption) (*Empty, error)
	Update(ctx context.Context, in *Cohort, opts ...grpc.CallOption) (*Empty, error)
	Delete(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	InviteCode(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Cohort, error)
}

type microClient struct {
	cc *grpc.ClientConn
}

func NewMicroClient(cc *grpc.ClientConn) MicroClient {
	return &microClient{cc}
}

func (c *microClient) List(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AllCohorts, error) {
	out := new(AllCohorts)
	err := grpc.Invoke(ctx, "/cohorts.micro/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microClient) Get(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Cohort, error) {
	out := new(Cohort)
	err := grpc.Invoke(ctx, "/cohorts.micro/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microClient) Create(ctx context.Context, in *Cohort, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/cohorts.micro/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microClient) Update(ctx context.Context, in *Cohort, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/cohorts.micro/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microClient) Delete(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/cohorts.micro/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microClient) InviteCode(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Cohort, error) {
	out := new(Cohort)
	err := grpc.Invoke(ctx, "/cohorts.micro/InviteCode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Micro service

type MicroServer interface {
	List(context.Context, *Empty) (*AllCohorts, error)
	Get(context.Context, *Id) (*Cohort, error)
	Create(context.Context, *Cohort) (*Empty, error)
	Update(context.Context, *Cohort) (*Empty, error)
	Delete(context.Context, *Id) (*Empty, error)
	InviteCode(context.Context, *Id) (*Cohort, error)
}

func RegisterMicroServer(s *grpc.Server, srv MicroServer) {
	s.RegisterService(&_Micro_serviceDesc, srv)
}

func _Micro_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cohorts.micro/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroServer).List(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Micro_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cohorts.micro/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroServer).Get(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Micro_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cohort)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cohorts.micro/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroServer).Create(ctx, req.(*Cohort))
	}
	return interceptor(ctx, in, info, handler)
}

func _Micro_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cohort)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cohorts.micro/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroServer).Update(ctx, req.(*Cohort))
	}
	return interceptor(ctx, in, info, handler)
}

func _Micro_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cohorts.micro/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroServer).Delete(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Micro_InviteCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroServer).InviteCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cohorts.micro/InviteCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroServer).InviteCode(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

var _Micro_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cohorts.micro",
	HandlerType: (*MicroServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _Micro_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Micro_Get_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Micro_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Micro_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Micro_Delete_Handler,
		},
		{
			MethodName: "InviteCode",
			Handler:    _Micro_InviteCode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("cohorts/cohorts.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 429 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x53, 0x5d, 0x8b, 0xd3, 0x40,
	0x14, 0xb5, 0x49, 0x93, 0xa6, 0x37, 0xb5, 0xea, 0x58, 0x65, 0x28, 0x88, 0x1a, 0x10, 0x2b, 0x6a,
	0x85, 0xfa, 0xe0, 0x73, 0xa9, 0x22, 0x85, 0xe2, 0x43, 0xc0, 0xe7, 0x92, 0xcd, 0x0c, 0x74, 0x20,
	0xcd, 0x94, 0x64, 0x5a, 0xe8, 0x9f, 0xd8, 0x1f, 0xb2, 0xbf, 0x72, 0x6f, 0xe6, 0x23, 0x65, 0xd3,
	0x87, 0xdd, 0xa7, 0xe6, 0x9e, 0x73, 0xe6, 0x9c, 0x3b, 0x73, 0x6f, 0xe1, 0x4d, 0x2e, 0x77, 0xb2,
	0x52, 0xf5, 0x0f, 0xfb, 0x3b, 0x3f, 0x54, 0x52, 0x49, 0x32, 0xb0, 0x65, 0x32, 0x80, 0xe0, 0xcf,
	0xfe, 0xa0, 0xce, 0xc9, 0x9d, 0x0f, 0xe1, 0x4a, 0x83, 0x64, 0x0c, 0x9e, 0x60, 0xb4, 0xf7, 0xa1,
	0x37, 0x1b, 0xa6, 0xf8, 0x45, 0x26, 0x10, 0xe4, 0xb2, 0x90, 0x15, 0xf5, 0x34, 0x64, 0x0a, 0xf2,
	0x16, 0xc2, 0x9d, 0x60, 0x8c, 0x97, 0xd4, 0x47, 0x38, 0x4a, 0x6d, 0x45, 0xde, 0x43, 0x2c, 0xca,
	0x93, 0x50, 0x7c, 0x9b, 0x4b, 0xc6, 0x69, 0x5f, 0x9f, 0x01, 0x03, 0xad, 0x10, 0x21, 0x04, 0xfa,
	0x65, 0xb6, 0xe7, 0x34, 0xd0, 0x8c, 0xfe, 0x6e, 0x22, 0x6a, 0x25, 0xab, 0x33, 0x0d, 0x4d, 0x84,
	0x2e, 0xc8, 0x3b, 0x80, 0x5a, 0x65, 0x95, 0xe2, 0x6c, 0x9b, 0x29, 0x3a, 0xd0, 0xd4, 0xd0, 0x22,
	0x4b, 0x45, 0x66, 0xf0, 0xd2, 0xd1, 0x05, 0x3f, 0xf1, 0x62, 0x8b, 0x5d, 0x47, 0x5a, 0x34, 0xb6,
	0xf8, 0xa6, 0x81, 0xd7, 0xac, 0x31, 0xca, 0x2b, 0x9e, 0x59, 0xa3, 0xa1, 0x31, 0xb2, 0x08, 0x1a,
	0x21, 0x7d, 0x3c, 0x30, 0x47, 0x83, 0xa1, 0x2d, 0x82, 0x34, 0xde, 0xa8, 0x90, 0x79, 0xa6, 0x84,
	0x2c, 0x9b, 0x88, 0xd8, 0xdc, 0xc8, 0x41, 0x68, 0xff, 0x1d, 0x22, 0x57, 0xd1, 0x11, 0xb2, 0xf1,
	0xe2, 0xd5, 0xdc, 0xbd, 0xf7, 0xc6, 0x12, 0x69, 0x2b, 0x69, 0xe2, 0xb2, 0x23, 0x13, 0x78, 0xc5,
	0xc6, 0xee, 0xb9, 0x89, 0xb3, 0x08, 0xba, 0x7d, 0x84, 0x91, 0xa3, 0xf5, 0x3b, 0x8d, 0xb5, 0x20,
	0xb6, 0xd8, 0x3f, 0x84, 0x92, 0x39, 0x44, 0xce, 0xf7, 0x6a, 0x5a, 0xee, 0x79, 0xbd, 0xcb, 0xf3,
	0x26, 0xbf, 0x00, 0x96, 0x45, 0x61, 0xc6, 0x5b, 0x93, 0x2f, 0xe0, 0xc6, 0x8f, 0xc7, 0x7c, 0xec,
	0xf6, 0x45, 0xdb, 0xad, 0x91, 0xa4, 0xed, 0x7a, 0x4c, 0xc0, 0xc3, 0x8e, 0x3a, 0x11, 0x8b, 0x5b,
	0x0f, 0x82, 0xbd, 0xc8, 0x2b, 0x89, 0x37, 0xef, 0x6f, 0x44, 0x8d, 0x2b, 0xd3, 0x3a, 0xe8, 0x6d,
	0x9a, 0xbe, 0x6e, 0xeb, 0x4b, 0x6e, 0xf2, 0x8c, 0x7c, 0x02, 0xff, 0x2f, 0x57, 0x24, 0x6e, 0xd9,
	0x35, 0x9b, 0x76, 0xc3, 0x51, 0xf6, 0x15, 0x57, 0x51, 0x0f, 0x87, 0x74, 0xc9, 0x69, 0x27, 0xc8,
	0x88, 0xff, 0xeb, 0x51, 0x3d, 0x45, 0xfc, 0x19, 0xc2, 0xdf, 0xbc, 0xe0, 0x28, 0x7e, 0xd0, 0xc3,
	0xb5, 0xf0, 0x1b, 0xc0, 0xfa, 0xb2, 0xb2, 0x8f, 0x34, 0x7c, 0x13, 0xea, 0x7f, 0xd5, 0xcf, 0xfb,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x06, 0xdd, 0xe5, 0x10, 0x6e, 0x03, 0x00, 0x00,
}
