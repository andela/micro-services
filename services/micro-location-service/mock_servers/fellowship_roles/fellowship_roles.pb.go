// Code generated by protoc-gen-go.
// source: fellowship_roles/fellowship_roles.proto
// DO NOT EDIT!

/*
Package fellowship_roles is a generated protocol buffer package.

It is generated from these files:
	fellowship_roles/fellowship_roles.proto

It has these top-level messages:
	RoleRequest
	RoleIdRequest
	Empty
	Skill
	Role
	RoleList
*/
package fellowship_roles

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Level int32

const (
	Level_BOOTCAMP        Level = 0
	Level_D0A_MONTH_ONE   Level = 1
	Level_D0A_SIMULATIONS Level = 2
	Level_D1_DEVELOPER    Level = 3
	Level_D2_DEVELOPER    Level = 4
	Level_D3_DEVELOPER    Level = 5
	Level_D4_DEVELOPER    Level = 6
)

var Level_name = map[int32]string{
	0: "BOOTCAMP",
	1: "D0A_MONTH_ONE",
	2: "D0A_SIMULATIONS",
	3: "D1_DEVELOPER",
	4: "D2_DEVELOPER",
	5: "D3_DEVELOPER",
	6: "D4_DEVELOPER",
}
var Level_value = map[string]int32{
	"BOOTCAMP":        0,
	"D0A_MONTH_ONE":   1,
	"D0A_SIMULATIONS": 2,
	"D1_DEVELOPER":    3,
	"D2_DEVELOPER":    4,
	"D3_DEVELOPER":    5,
	"D4_DEVELOPER":    6,
}

func (x Level) String() string {
	return proto.EnumName(Level_name, int32(x))
}
func (Level) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type RoleRequest struct {
	Id     int32   `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name   string  `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Level  Level   `protobuf:"varint,3,opt,name=level,enum=fellowship_roles.Level" json:"level,omitempty"`
	Skills []int32 `protobuf:"varint,4,rep,name=skills" json:"skills,omitempty"`
}

func (m *RoleRequest) Reset()                    { *m = RoleRequest{} }
func (m *RoleRequest) String() string            { return proto.CompactTextString(m) }
func (*RoleRequest) ProtoMessage()               {}
func (*RoleRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type RoleIdRequest struct {
	Id int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *RoleIdRequest) Reset()                    { *m = RoleIdRequest{} }
func (m *RoleIdRequest) String() string            { return proto.CompactTextString(m) }
func (*RoleIdRequest) ProtoMessage()               {}
func (*RoleIdRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type Skill struct {
	Id               int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name             string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Description      string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	ScoreGuidelineId int32  `protobuf:"varint,4,opt,name=score_guideline_id,json=scoreGuidelineId" json:"score_guideline_id,omitempty"`
}

func (m *Skill) Reset()                    { *m = Skill{} }
func (m *Skill) String() string            { return proto.CompactTextString(m) }
func (*Skill) ProtoMessage()               {}
func (*Skill) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type Role struct {
	Id        int32    `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name      string   `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Level     Level    `protobuf:"varint,3,opt,name=level,enum=fellowship_roles.Level" json:"level,omitempty"`
	Skills    []*Skill `protobuf:"bytes,4,rep,name=skills" json:"skills,omitempty"`
	CreatedAt string   `protobuf:"bytes,5,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	UpdatedAt string   `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty"`
}

func (m *Role) Reset()                    { *m = Role{} }
func (m *Role) String() string            { return proto.CompactTextString(m) }
func (*Role) ProtoMessage()               {}
func (*Role) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Role) GetSkills() []*Skill {
	if m != nil {
		return m.Skills
	}
	return nil
}

type RoleList struct {
	Roles []*Role `protobuf:"bytes,1,rep,name=roles" json:"roles,omitempty"`
}

func (m *RoleList) Reset()                    { *m = RoleList{} }
func (m *RoleList) String() string            { return proto.CompactTextString(m) }
func (*RoleList) ProtoMessage()               {}
func (*RoleList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *RoleList) GetRoles() []*Role {
	if m != nil {
		return m.Roles
	}
	return nil
}

func init() {
	proto.RegisterType((*RoleRequest)(nil), "fellowship_roles.RoleRequest")
	proto.RegisterType((*RoleIdRequest)(nil), "fellowship_roles.RoleIdRequest")
	proto.RegisterType((*Empty)(nil), "fellowship_roles.Empty")
	proto.RegisterType((*Skill)(nil), "fellowship_roles.Skill")
	proto.RegisterType((*Role)(nil), "fellowship_roles.Role")
	proto.RegisterType((*RoleList)(nil), "fellowship_roles.RoleList")
	proto.RegisterEnum("fellowship_roles.Level", Level_name, Level_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Micro service

type MicroClient interface {
	Create(ctx context.Context, in *RoleRequest, opts ...grpc.CallOption) (*Empty, error)
	Delete(ctx context.Context, in *RoleIdRequest, opts ...grpc.CallOption) (*Empty, error)
	Update(ctx context.Context, in *RoleRequest, opts ...grpc.CallOption) (*Empty, error)
	Get(ctx context.Context, in *RoleIdRequest, opts ...grpc.CallOption) (*Role, error)
	List(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RoleList, error)
}

type microClient struct {
	cc *grpc.ClientConn
}

func NewMicroClient(cc *grpc.ClientConn) MicroClient {
	return &microClient{cc}
}

func (c *microClient) Create(ctx context.Context, in *RoleRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/fellowship_roles.micro/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microClient) Delete(ctx context.Context, in *RoleIdRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/fellowship_roles.micro/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microClient) Update(ctx context.Context, in *RoleRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/fellowship_roles.micro/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microClient) Get(ctx context.Context, in *RoleIdRequest, opts ...grpc.CallOption) (*Role, error) {
	out := new(Role)
	err := grpc.Invoke(ctx, "/fellowship_roles.micro/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microClient) List(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RoleList, error) {
	out := new(RoleList)
	err := grpc.Invoke(ctx, "/fellowship_roles.micro/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Micro service

type MicroServer interface {
	Create(context.Context, *RoleRequest) (*Empty, error)
	Delete(context.Context, *RoleIdRequest) (*Empty, error)
	Update(context.Context, *RoleRequest) (*Empty, error)
	Get(context.Context, *RoleIdRequest) (*Role, error)
	List(context.Context, *Empty) (*RoleList, error)
}

func RegisterMicroServer(s *grpc.Server, srv MicroServer) {
	s.RegisterService(&_Micro_serviceDesc, srv)
}

func _Micro_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fellowship_roles.micro/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroServer).Create(ctx, req.(*RoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Micro_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fellowship_roles.micro/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroServer).Delete(ctx, req.(*RoleIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Micro_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fellowship_roles.micro/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroServer).Update(ctx, req.(*RoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Micro_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fellowship_roles.micro/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroServer).Get(ctx, req.(*RoleIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Micro_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fellowship_roles.micro/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroServer).List(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Micro_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fellowship_roles.micro",
	HandlerType: (*MicroServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Micro_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Micro_Delete_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Micro_Update_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Micro_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Micro_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("fellowship_roles/fellowship_roles.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 479 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xb4, 0x94, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0xe3, 0xc4, 0x6b, 0x9a, 0x49, 0x5b, 0xcc, 0x22, 0x15, 0x2b, 0x52, 0xd5, 0xc8, 0x17,
	0x10, 0x2a, 0x2d, 0xa4, 0x1c, 0xb8, 0x20, 0xe1, 0xd6, 0x56, 0x89, 0x94, 0xc4, 0x95, 0x93, 0x72,
	0xb5, 0x42, 0xbc, 0xc0, 0x8a, 0x4d, 0x6c, 0xec, 0x0d, 0x7f, 0xc4, 0x99, 0x77, 0xe3, 0x09, 0x78,
	0x1e, 0x76, 0xc7, 0x09, 0x0a, 0x6d, 0x0c, 0x48, 0xa8, 0xb7, 0xcd, 0x6f, 0x76, 0xbf, 0xef, 0x9b,
	0xf1, 0x28, 0x70, 0xff, 0x0d, 0x13, 0x22, 0xfd, 0x54, 0xbc, 0xe3, 0x59, 0x9c, 0xa7, 0x82, 0x15,
	0xc7, 0x57, 0xc1, 0x51, 0x96, 0xa7, 0x32, 0xa5, 0xf6, 0x55, 0xee, 0x7e, 0x86, 0x56, 0xa4, 0x0e,
	0x11, 0xfb, 0xb0, 0x60, 0x85, 0xa4, 0xbb, 0x50, 0xe7, 0x89, 0x63, 0x74, 0x8c, 0x07, 0x24, 0x52,
	0x27, 0x4a, 0xc1, 0x9c, 0x4f, 0x66, 0xcc, 0xa9, 0x2b, 0xd2, 0x8c, 0xf0, 0x4c, 0x1f, 0x01, 0x11,
	0xec, 0x23, 0x13, 0x4e, 0x43, 0xc1, 0xdd, 0xee, 0xbd, 0xa3, 0x6b, 0x66, 0x7d, 0x5d, 0x8e, 0xca,
	0x5b, 0x74, 0x0f, 0xac, 0xe2, 0x3d, 0x17, 0xa2, 0x70, 0xcc, 0x4e, 0x43, 0xc9, 0x2e, 0x7f, 0xb9,
	0x07, 0xb0, 0xa3, 0x9d, 0x7b, 0x49, 0x85, 0xb7, 0x7b, 0x0b, 0x48, 0x30, 0xcb, 0xe4, 0x17, 0xf7,
	0x2b, 0x90, 0x91, 0x7e, 0xf3, 0x4f, 0xe9, 0x3a, 0xd0, 0x4a, 0x58, 0x31, 0xcd, 0x79, 0x26, 0x79,
	0x3a, 0xc7, 0x8c, 0xcd, 0x68, 0x1d, 0xd1, 0x43, 0xa0, 0xc5, 0x34, 0xcd, 0x59, 0xfc, 0x76, 0xc1,
	0x13, 0x26, 0xf8, 0x9c, 0xc5, 0x4a, 0xd5, 0x44, 0x55, 0x1b, 0x2b, 0xe7, 0xab, 0x42, 0x2f, 0x71,
	0xbf, 0x1b, 0x60, 0xea, 0x9c, 0x37, 0x31, 0x9a, 0xe3, 0xdf, 0x46, 0xd3, 0xda, 0x74, 0x1f, 0x1b,
	0x5f, 0xcd, 0x8c, 0xee, 0x03, 0x4c, 0x73, 0x36, 0x91, 0x2c, 0x89, 0x27, 0xd2, 0x21, 0xe8, 0xdc,
	0x5c, 0x12, 0x4f, 0xea, 0xf2, 0x22, 0x4b, 0x56, 0x65, 0xab, 0x2c, 0x2f, 0x89, 0x27, 0xdd, 0x67,
	0xb0, 0xa5, 0x3b, 0xe9, 0x73, 0x35, 0xec, 0x43, 0x20, 0x68, 0xa0, 0x1a, 0xd2, 0xce, 0x7b, 0xd7,
	0x9d, 0x71, 0x2d, 0xca, 0x4b, 0x0f, 0xbf, 0x19, 0x40, 0x30, 0x39, 0xdd, 0x86, 0xad, 0xd3, 0x30,
	0x1c, 0x9f, 0x79, 0x83, 0x0b, 0xbb, 0x46, 0xef, 0xc0, 0x8e, 0xff, 0xd8, 0x8b, 0x07, 0xe1, 0x70,
	0xfc, 0x32, 0x0e, 0x87, 0x81, 0x6d, 0xd0, 0xbb, 0x70, 0x5b, 0xa3, 0x51, 0x6f, 0x70, 0xd9, 0xf7,
	0xc6, 0xbd, 0x70, 0x38, 0xb2, 0xeb, 0xd4, 0x86, 0x6d, 0xff, 0x49, 0xec, 0x07, 0xaf, 0x82, 0x7e,
	0x78, 0x11, 0x44, 0x76, 0x03, 0x49, 0x77, 0x8d, 0x98, 0x48, 0x4e, 0xd6, 0x08, 0x41, 0xf2, 0x74,
	0x8d, 0x58, 0xdd, 0x1f, 0x75, 0x20, 0x33, 0x3e, 0xcd, 0x53, 0x7a, 0x0a, 0xd6, 0x19, 0xf6, 0x4d,
	0xf7, 0x2b, 0xa2, 0x97, 0x5b, 0xd5, 0xde, 0x30, 0xd3, 0x72, 0xab, 0x6a, 0xd4, 0x07, 0xcb, 0x67,
	0x82, 0x29, 0x8d, 0x83, 0xcd, 0x1a, 0xbf, 0x76, 0xf3, 0x4f, 0x2a, 0x2a, 0xc9, 0x25, 0x8e, 0xf8,
	0x3f, 0x92, 0xbc, 0x80, 0xc6, 0x39, 0x93, 0x7f, 0x8f, 0x51, 0xf1, 0x99, 0x94, 0xc2, 0x73, 0x30,
	0xf1, 0xbb, 0x56, 0x99, 0xb4, 0xdb, 0x9b, 0x9f, 0xea, 0x47, 0x6e, 0xed, 0xb5, 0x85, 0xff, 0x0f,
	0x27, 0x3f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xd9, 0x58, 0x08, 0x23, 0x4a, 0x04, 0x00, 0x00,
}
