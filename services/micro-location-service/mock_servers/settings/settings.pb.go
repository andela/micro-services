// Code generated by protoc-gen-go.
// source: settings/settings.proto
// DO NOT EDIT!

/*
Package settings is a generated protocol buffer package.

define package name of the proto file

It is generated from these files:
	settings/settings.proto

It has these top-level messages:
	Empty
	Setting
	SettingId
	SettingRequest
	SettingList
	Widget
	Field
	List
	Data
*/
package settings

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// define the message formats used by the in the Interface definitions
type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Setting struct {
	Id        int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	AppName   string `protobuf:"bytes,2,opt,name=appName" json:"appName,omitempty"`
	UserId    string `protobuf:"bytes,3,opt,name=userId" json:"userId,omitempty"`
	Data      *Data  `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
	CreatedAt string `protobuf:"bytes,5,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	UpdatedAt string `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty"`
}

func (m *Setting) Reset()                    { *m = Setting{} }
func (m *Setting) String() string            { return proto.CompactTextString(m) }
func (*Setting) ProtoMessage()               {}
func (*Setting) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Setting) GetData() *Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type SettingId struct {
	Id int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *SettingId) Reset()                    { *m = SettingId{} }
func (m *SettingId) String() string            { return proto.CompactTextString(m) }
func (*SettingId) ProtoMessage()               {}
func (*SettingId) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type SettingRequest struct {
	UserId  string `protobuf:"bytes,1,opt,name=userId" json:"userId,omitempty"`
	AppName string `protobuf:"bytes,2,opt,name=appName" json:"appName,omitempty"`
}

func (m *SettingRequest) Reset()                    { *m = SettingRequest{} }
func (m *SettingRequest) String() string            { return proto.CompactTextString(m) }
func (*SettingRequest) ProtoMessage()               {}
func (*SettingRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type SettingList struct {
	Settings []*Setting `protobuf:"bytes,1,rep,name=settings" json:"settings,omitempty"`
}

func (m *SettingList) Reset()                    { *m = SettingList{} }
func (m *SettingList) String() string            { return proto.CompactTextString(m) }
func (*SettingList) ProtoMessage()               {}
func (*SettingList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *SettingList) GetSettings() []*Setting {
	if m != nil {
		return m.Settings
	}
	return nil
}

type Widget struct {
	Description string `protobuf:"bytes,1,opt,name=description" json:"description,omitempty"`
	Value       bool   `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`
}

func (m *Widget) Reset()                    { *m = Widget{} }
func (m *Widget) String() string            { return proto.CompactTextString(m) }
func (*Widget) ProtoMessage()               {}
func (*Widget) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type Field struct {
	Name  string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Key   string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	Order int32  `protobuf:"varint,3,opt,name=order" json:"order,omitempty"`
}

func (m *Field) Reset()                    { *m = Field{} }
func (m *Field) String() string            { return proto.CompactTextString(m) }
func (*Field) ProtoMessage()               {}
func (*Field) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type List struct {
	Values []*Field `protobuf:"bytes,1,rep,name=values" json:"values,omitempty"`
}

func (m *List) Reset()                    { *m = List{} }
func (m *List) String() string            { return proto.CompactTextString(m) }
func (*List) ProtoMessage()               {}
func (*List) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *List) GetValues() []*Field {
	if m != nil {
		return m.Values
	}
	return nil
}

type Data struct {
	WidgetSettings map[string]*Widget `protobuf:"bytes,1,rep,name=widget_settings,json=widgetSettings" json:"widget_settings,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Fields         map[string]*List   `protobuf:"bytes,2,rep,name=fields" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Data) Reset()                    { *m = Data{} }
func (m *Data) String() string            { return proto.CompactTextString(m) }
func (*Data) ProtoMessage()               {}
func (*Data) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Data) GetWidgetSettings() map[string]*Widget {
	if m != nil {
		return m.WidgetSettings
	}
	return nil
}

func (m *Data) GetFields() map[string]*List {
	if m != nil {
		return m.Fields
	}
	return nil
}

func init() {
	proto.RegisterType((*Empty)(nil), "settings.Empty")
	proto.RegisterType((*Setting)(nil), "settings.Setting")
	proto.RegisterType((*SettingId)(nil), "settings.SettingId")
	proto.RegisterType((*SettingRequest)(nil), "settings.SettingRequest")
	proto.RegisterType((*SettingList)(nil), "settings.SettingList")
	proto.RegisterType((*Widget)(nil), "settings.Widget")
	proto.RegisterType((*Field)(nil), "settings.Field")
	proto.RegisterType((*List)(nil), "settings.List")
	proto.RegisterType((*Data)(nil), "settings.Data")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Micro service

type MicroClient interface {
	Create(ctx context.Context, in *Setting, opts ...grpc.CallOption) (*Empty, error)
	Update(ctx context.Context, in *Setting, opts ...grpc.CallOption) (*Empty, error)
	Delete(ctx context.Context, in *SettingId, opts ...grpc.CallOption) (*Empty, error)
	Get(ctx context.Context, in *SettingId, opts ...grpc.CallOption) (*Setting, error)
	List(ctx context.Context, in *SettingRequest, opts ...grpc.CallOption) (*SettingList, error)
}

type microClient struct {
	cc *grpc.ClientConn
}

func NewMicroClient(cc *grpc.ClientConn) MicroClient {
	return &microClient{cc}
}

func (c *microClient) Create(ctx context.Context, in *Setting, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/settings.micro/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microClient) Update(ctx context.Context, in *Setting, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/settings.micro/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microClient) Delete(ctx context.Context, in *SettingId, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/settings.micro/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microClient) Get(ctx context.Context, in *SettingId, opts ...grpc.CallOption) (*Setting, error) {
	out := new(Setting)
	err := grpc.Invoke(ctx, "/settings.micro/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microClient) List(ctx context.Context, in *SettingRequest, opts ...grpc.CallOption) (*SettingList, error) {
	out := new(SettingList)
	err := grpc.Invoke(ctx, "/settings.micro/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Micro service

type MicroServer interface {
	Create(context.Context, *Setting) (*Empty, error)
	Update(context.Context, *Setting) (*Empty, error)
	Delete(context.Context, *SettingId) (*Empty, error)
	Get(context.Context, *SettingId) (*Setting, error)
	List(context.Context, *SettingRequest) (*SettingList, error)
}

func RegisterMicroServer(s *grpc.Server, srv MicroServer) {
	s.RegisterService(&_Micro_serviceDesc, srv)
}

func _Micro_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Setting)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/settings.micro/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroServer).Create(ctx, req.(*Setting))
	}
	return interceptor(ctx, in, info, handler)
}

func _Micro_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Setting)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/settings.micro/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroServer).Update(ctx, req.(*Setting))
	}
	return interceptor(ctx, in, info, handler)
}

func _Micro_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SettingId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/settings.micro/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroServer).Delete(ctx, req.(*SettingId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Micro_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SettingId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/settings.micro/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroServer).Get(ctx, req.(*SettingId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Micro_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/settings.micro/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroServer).List(ctx, req.(*SettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Micro_serviceDesc = grpc.ServiceDesc{
	ServiceName: "settings.micro",
	HandlerType: (*MicroServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Micro_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Micro_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Micro_Delete_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Micro_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Micro_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("settings/settings.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 503 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x54, 0xcb, 0x6e, 0xd3, 0x40,
	0x14, 0xad, 0x1d, 0x7b, 0xd2, 0x5c, 0x4b, 0x69, 0x99, 0xf2, 0xb0, 0x8c, 0x90, 0xaa, 0x11, 0x02,
	0x36, 0x24, 0x28, 0x6c, 0x00, 0xb1, 0xa0, 0xb4, 0x05, 0x45, 0x20, 0x16, 0x53, 0x21, 0x96, 0x95,
	0xc9, 0x0c, 0xd5, 0x88, 0x24, 0x36, 0xe3, 0x09, 0x55, 0x3e, 0x80, 0x6f, 0x61, 0xc5, 0x3f, 0x32,
	0x2f, 0xd7, 0x4e, 0x1c, 0x24, 0x76, 0xf7, 0x79, 0xee, 0x39, 0x77, 0xae, 0x0d, 0xf7, 0x2a, 0xae,
	0x94, 0x58, 0x5e, 0x55, 0xe3, 0xda, 0x18, 0x95, 0xb2, 0x50, 0x05, 0xde, 0xaf, 0x7d, 0xd2, 0x87,
	0xf8, 0x7c, 0x51, 0xaa, 0x35, 0xf9, 0x13, 0x40, 0xff, 0xc2, 0x45, 0xf1, 0x10, 0x42, 0xc1, 0xd2,
	0xe0, 0x38, 0x78, 0x12, 0x53, 0x6d, 0xe1, 0x14, 0xfa, 0x79, 0x59, 0x7e, 0xca, 0x17, 0x3c, 0x0d,
	0x75, 0x70, 0x40, 0x6b, 0x17, 0xdf, 0x05, 0xb4, 0xaa, 0xb8, 0x9c, 0xb2, 0xb4, 0x67, 0x13, 0xde,
	0xc3, 0x04, 0x22, 0x96, 0xab, 0x3c, 0x8d, 0x74, 0x34, 0x99, 0x0c, 0x47, 0x37, 0xf3, 0xcf, 0x74,
	0x94, 0xda, 0x1c, 0x7e, 0x00, 0x30, 0x93, 0x3c, 0x57, 0x9c, 0x5d, 0xe6, 0x2a, 0x8d, 0x6d, 0xff,
	0xc0, 0x47, 0x4e, 0x94, 0x49, 0xaf, 0x4a, 0x56, 0xa7, 0x91, 0x4b, 0xfb, 0xc8, 0x89, 0x22, 0xf7,
	0x61, 0xe0, 0xe9, 0xea, 0x71, 0x5b, 0x84, 0xc9, 0x5b, 0x18, 0xfa, 0x24, 0xe5, 0x3f, 0x56, 0xbc,
	0x52, 0x2d, 0xa2, 0xc1, 0x06, 0xd1, 0x7f, 0x4a, 0x23, 0xaf, 0x21, 0xf1, 0x18, 0x1f, 0x85, 0x06,
	0x78, 0x0a, 0x37, 0x4b, 0xd3, 0x10, 0x3d, 0xad, 0xea, 0x56, 0xa3, 0xaa, 0x1e, 0xd6, 0xec, 0xf5,
	0x0d, 0xa0, 0x2f, 0x82, 0x5d, 0x71, 0x85, 0x8f, 0x21, 0x61, 0xbc, 0x9a, 0x49, 0x51, 0x2a, 0x51,
	0x2c, 0xfd, 0xf8, 0x76, 0x08, 0xdf, 0x86, 0xf8, 0x67, 0x3e, 0x5f, 0x39, 0x06, 0xfb, 0xd4, 0x39,
	0xe4, 0x14, 0xe2, 0x77, 0x82, 0xcf, 0x19, 0xc6, 0x10, 0x2d, 0x0d, 0x3f, 0xd7, 0x69, 0x6d, 0x7c,
	0x08, 0xbd, 0xef, 0x7c, 0xed, 0x29, 0x1b, 0xd3, 0x80, 0x14, 0x92, 0x71, 0x69, 0x1f, 0x22, 0xa6,
	0xce, 0x21, 0x63, 0x88, 0x2c, 0xfb, 0xc7, 0x80, 0x2c, 0x6a, 0xcd, 0xfd, 0xa0, 0xe1, 0x6e, 0x87,
	0x50, 0x9f, 0x26, 0xbf, 0x43, 0x88, 0xcc, 0x1b, 0xe1, 0x0f, 0x70, 0x70, 0x6d, 0x05, 0x5c, 0x6e,
	0xc9, 0x26, 0x9b, 0x8f, 0x39, 0x72, 0x32, 0xfd, 0x06, 0xaa, 0xf3, 0xa5, 0x92, 0x6b, 0x3a, 0xbc,
	0xde, 0x08, 0xe2, 0x09, 0xa0, 0x6f, 0x66, 0x4c, 0xa5, 0x19, 0x1b, 0x8c, 0x6c, 0x0b, 0xc3, 0x72,
	0xf0, 0xbd, 0xbe, 0x32, 0xbb, 0x80, 0xa3, 0x1d, 0xd0, 0xb5, 0xf2, 0xa0, 0x51, 0xfe, 0xa8, 0xbd,
	0xbe, 0x64, 0x72, 0xd8, 0x60, 0xbb, 0x7e, 0xbf, 0xd0, 0x57, 0xe1, 0x8b, 0x20, 0x9b, 0x42, 0xd2,
	0x9a, 0xb5, 0x03, 0xec, 0xe1, 0x26, 0x58, 0xeb, 0x72, 0xcd, 0x1e, 0x5b, 0x50, 0x93, 0x5f, 0x21,
	0xc4, 0x0b, 0x31, 0x93, 0x05, 0x1e, 0x01, 0x3a, 0xb5, 0x67, 0x8b, 0xbb, 0x27, 0x91, 0xb5, 0x36,
	0xed, 0x3e, 0xb4, 0x3d, 0x53, 0xff, 0xd9, 0xde, 0xf1, 0x7f, 0xd6, 0x3f, 0x03, 0x74, 0xc6, 0xe7,
	0x5c, 0xd7, 0x1f, 0x75, 0xea, 0xa7, 0x6c, 0x57, 0xc7, 0x18, 0x7a, 0xef, 0xf5, 0xe9, 0xed, 0x2c,
	0xef, 0xce, 0xd4, 0x0d, 0x2f, 0xfd, 0x9d, 0xa4, 0xdd, 0x9b, 0x76, 0x1f, 0x50, 0x76, 0xa7, 0x93,
	0x31, 0x0d, 0x64, 0xef, 0x2b, 0xb2, 0xbf, 0x94, 0xe7, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x7a,
	0x19, 0x88, 0x38, 0x6d, 0x04, 0x00, 0x00,
}
